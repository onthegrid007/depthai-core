// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImgFrame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImgFrame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImgFrame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "SpatialImgDetections.pb.h"
#include "ImgDetections.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImgFrame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImgFrame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImgFrame_2eproto;
namespace proto {
class CameraSettings;
struct CameraSettingsDefaultTypeInternal;
extern CameraSettingsDefaultTypeInternal _CameraSettings_default_instance_;
class FloatArray;
struct FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class ImgFrame;
struct ImgFrameDefaultTypeInternal;
extern ImgFrameDefaultTypeInternal _ImgFrame_default_instance_;
class ImgTransformation;
struct ImgTransformationDefaultTypeInternal;
extern ImgTransformationDefaultTypeInternal _ImgTransformation_default_instance_;
class ImgTransformations;
struct ImgTransformationsDefaultTypeInternal;
extern ImgTransformationsDefaultTypeInternal _ImgTransformations_default_instance_;
class Specs;
struct SpecsDefaultTypeInternal;
extern SpecsDefaultTypeInternal _Specs_default_instance_;
class TransformationMatrix;
struct TransformationMatrixDefaultTypeInternal;
extern TransformationMatrixDefaultTypeInternal _TransformationMatrix_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::CameraSettings* Arena::CreateMaybeMessage<::proto::CameraSettings>(Arena*);
template<> ::proto::FloatArray* Arena::CreateMaybeMessage<::proto::FloatArray>(Arena*);
template<> ::proto::ImgFrame* Arena::CreateMaybeMessage<::proto::ImgFrame>(Arena*);
template<> ::proto::ImgTransformation* Arena::CreateMaybeMessage<::proto::ImgTransformation>(Arena*);
template<> ::proto::ImgTransformations* Arena::CreateMaybeMessage<::proto::ImgTransformations>(Arena*);
template<> ::proto::Specs* Arena::CreateMaybeMessage<::proto::Specs>(Arena*);
template<> ::proto::TransformationMatrix* Arena::CreateMaybeMessage<::proto::TransformationMatrix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum Type : int {
  YUV422i = 0,
  YUV444p = 1,
  YUV420p = 2,
  YUV422p = 3,
  YUV400p = 4,
  RGBA8888 = 5,
  RGB161616 = 6,
  RGB888p = 7,
  BGR888p = 8,
  RGB888i = 9,
  BGR888i = 10,
  LUT2 = 11,
  LUT4 = 12,
  LUT16 = 13,
  RAW16 = 14,
  RAW14 = 15,
  RAW12 = 16,
  RAW10 = 17,
  RAW8 = 18,
  PACK10 = 19,
  PACK12 = 20,
  YUV444i = 21,
  NV12 = 22,
  NV21 = 23,
  BITSTREAM = 24,
  HDR = 25,
  RGBF16F16F16p = 26,
  BGRF16F16F16p = 27,
  RGBF16F16F16i = 28,
  BGRF16F16F16i = 29,
  GRAY8 = 30,
  GRAYF16 = 31,
  RAW32 = 32,
  NONE = 33,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = YUV422i;
constexpr Type Type_MAX = NONE;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Transformation : int {
  INIT = 0,
  CROP = 1,
  ROTATION = 2,
  PAD = 3,
  FLIP = 4,
  SCALE = 5,
  Transformation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Transformation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Transformation_IsValid(int value);
constexpr Transformation Transformation_MIN = INIT;
constexpr Transformation Transformation_MAX = SCALE;
constexpr int Transformation_ARRAYSIZE = Transformation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transformation_descriptor();
template<typename T>
inline const std::string& Transformation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transformation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transformation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transformation_descriptor(), enum_t_value);
}
inline bool Transformation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Transformation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transformation>(
    Transformation_descriptor(), name, value);
}
// ===================================================================

class ImgFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ImgFrame) */ {
 public:
  inline ImgFrame() : ImgFrame(nullptr) {}
  ~ImgFrame() override;
  explicit constexpr ImgFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgFrame(const ImgFrame& from);
  ImgFrame(ImgFrame&& from) noexcept
    : ImgFrame() {
    *this = ::std::move(from);
  }

  inline ImgFrame& operator=(const ImgFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgFrame& operator=(ImgFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgFrame* internal_default_instance() {
    return reinterpret_cast<const ImgFrame*>(
               &_ImgFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImgFrame& a, ImgFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImgFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImgFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ImgFrame";
  }
  protected:
  explicit ImgFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
    kTsDeviceFieldNumber = 2,
    kFbFieldNumber = 4,
    kSourceFbFieldNumber = 5,
    kCamFieldNumber = 6,
    kTransformationsFieldNumber = 9,
    kSequenceNumFieldNumber = 3,
    kHFovDegreesFieldNumber = 7,
    kInstanceNumFieldNumber = 8,
  };
  // .proto.Timestamp ts = 1;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  const ::proto::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_ts();
  ::proto::Timestamp* mutable_ts();
  void set_allocated_ts(::proto::Timestamp* ts);
  private:
  const ::proto::Timestamp& _internal_ts() const;
  ::proto::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::proto::Timestamp* ts);
  ::proto::Timestamp* unsafe_arena_release_ts();

  // .proto.Timestamp tsDevice = 2;
  bool has_tsdevice() const;
  private:
  bool _internal_has_tsdevice() const;
  public:
  void clear_tsdevice();
  const ::proto::Timestamp& tsdevice() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_tsdevice();
  ::proto::Timestamp* mutable_tsdevice();
  void set_allocated_tsdevice(::proto::Timestamp* tsdevice);
  private:
  const ::proto::Timestamp& _internal_tsdevice() const;
  ::proto::Timestamp* _internal_mutable_tsdevice();
  public:
  void unsafe_arena_set_allocated_tsdevice(
      ::proto::Timestamp* tsdevice);
  ::proto::Timestamp* unsafe_arena_release_tsdevice();

  // .proto.Specs fb = 4;
  bool has_fb() const;
  private:
  bool _internal_has_fb() const;
  public:
  void clear_fb();
  const ::proto::Specs& fb() const;
  PROTOBUF_NODISCARD ::proto::Specs* release_fb();
  ::proto::Specs* mutable_fb();
  void set_allocated_fb(::proto::Specs* fb);
  private:
  const ::proto::Specs& _internal_fb() const;
  ::proto::Specs* _internal_mutable_fb();
  public:
  void unsafe_arena_set_allocated_fb(
      ::proto::Specs* fb);
  ::proto::Specs* unsafe_arena_release_fb();

  // .proto.Specs sourceFb = 5;
  bool has_sourcefb() const;
  private:
  bool _internal_has_sourcefb() const;
  public:
  void clear_sourcefb();
  const ::proto::Specs& sourcefb() const;
  PROTOBUF_NODISCARD ::proto::Specs* release_sourcefb();
  ::proto::Specs* mutable_sourcefb();
  void set_allocated_sourcefb(::proto::Specs* sourcefb);
  private:
  const ::proto::Specs& _internal_sourcefb() const;
  ::proto::Specs* _internal_mutable_sourcefb();
  public:
  void unsafe_arena_set_allocated_sourcefb(
      ::proto::Specs* sourcefb);
  ::proto::Specs* unsafe_arena_release_sourcefb();

  // .proto.CameraSettings cam = 6;
  bool has_cam() const;
  private:
  bool _internal_has_cam() const;
  public:
  void clear_cam();
  const ::proto::CameraSettings& cam() const;
  PROTOBUF_NODISCARD ::proto::CameraSettings* release_cam();
  ::proto::CameraSettings* mutable_cam();
  void set_allocated_cam(::proto::CameraSettings* cam);
  private:
  const ::proto::CameraSettings& _internal_cam() const;
  ::proto::CameraSettings* _internal_mutable_cam();
  public:
  void unsafe_arena_set_allocated_cam(
      ::proto::CameraSettings* cam);
  ::proto::CameraSettings* unsafe_arena_release_cam();

  // .proto.ImgTransformations transformations = 9;
  bool has_transformations() const;
  private:
  bool _internal_has_transformations() const;
  public:
  void clear_transformations();
  const ::proto::ImgTransformations& transformations() const;
  PROTOBUF_NODISCARD ::proto::ImgTransformations* release_transformations();
  ::proto::ImgTransformations* mutable_transformations();
  void set_allocated_transformations(::proto::ImgTransformations* transformations);
  private:
  const ::proto::ImgTransformations& _internal_transformations() const;
  ::proto::ImgTransformations* _internal_mutable_transformations();
  public:
  void unsafe_arena_set_allocated_transformations(
      ::proto::ImgTransformations* transformations);
  ::proto::ImgTransformations* unsafe_arena_release_transformations();

  // int64 sequenceNum = 3;
  void clear_sequencenum();
  int64_t sequencenum() const;
  void set_sequencenum(int64_t value);
  private:
  int64_t _internal_sequencenum() const;
  void _internal_set_sequencenum(int64_t value);
  public:

  // float HFovDegrees = 7;
  void clear_hfovdegrees();
  float hfovdegrees() const;
  void set_hfovdegrees(float value);
  private:
  float _internal_hfovdegrees() const;
  void _internal_set_hfovdegrees(float value);
  public:

  // uint32 instanceNum = 8;
  void clear_instancenum();
  uint32_t instancenum() const;
  void set_instancenum(uint32_t value);
  private:
  uint32_t _internal_instancenum() const;
  void _internal_set_instancenum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ImgFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Timestamp* ts_;
  ::proto::Timestamp* tsdevice_;
  ::proto::Specs* fb_;
  ::proto::Specs* sourcefb_;
  ::proto::CameraSettings* cam_;
  ::proto::ImgTransformations* transformations_;
  int64_t sequencenum_;
  float hfovdegrees_;
  uint32_t instancenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class Specs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Specs) */ {
 public:
  inline Specs() : Specs(nullptr) {}
  ~Specs() override;
  explicit constexpr Specs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Specs(const Specs& from);
  Specs(Specs&& from) noexcept
    : Specs() {
    *this = ::std::move(from);
  }

  inline Specs& operator=(const Specs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Specs& operator=(Specs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Specs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Specs* internal_default_instance() {
    return reinterpret_cast<const Specs*>(
               &_Specs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Specs& a, Specs& b) {
    a.Swap(&b);
  }
  inline void Swap(Specs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Specs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Specs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Specs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Specs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Specs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Specs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Specs";
  }
  protected:
  explicit Specs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kStrideFieldNumber = 4,
    kBytesPPFieldNumber = 5,
    kP1OffsetFieldNumber = 6,
    kP2OffsetFieldNumber = 7,
    kP3OffsetFieldNumber = 8,
  };
  // .proto.Type type = 1;
  void clear_type();
  ::proto::Type type() const;
  void set_type(::proto::Type value);
  private:
  ::proto::Type _internal_type() const;
  void _internal_set_type(::proto::Type value);
  public:

  // uint32 width = 2;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 height = 3;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 stride = 4;
  void clear_stride();
  uint32_t stride() const;
  void set_stride(uint32_t value);
  private:
  uint32_t _internal_stride() const;
  void _internal_set_stride(uint32_t value);
  public:

  // uint32 bytesPP = 5;
  void clear_bytespp();
  uint32_t bytespp() const;
  void set_bytespp(uint32_t value);
  private:
  uint32_t _internal_bytespp() const;
  void _internal_set_bytespp(uint32_t value);
  public:

  // uint32 p1Offset = 6;
  void clear_p1offset();
  uint32_t p1offset() const;
  void set_p1offset(uint32_t value);
  private:
  uint32_t _internal_p1offset() const;
  void _internal_set_p1offset(uint32_t value);
  public:

  // uint32 p2Offset = 7;
  void clear_p2offset();
  uint32_t p2offset() const;
  void set_p2offset(uint32_t value);
  private:
  uint32_t _internal_p2offset() const;
  void _internal_set_p2offset(uint32_t value);
  public:

  // uint32 p3Offset = 8;
  void clear_p3offset();
  uint32_t p3offset() const;
  void set_p3offset(uint32_t value);
  private:
  uint32_t _internal_p3offset() const;
  void _internal_set_p3offset(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Specs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  uint32_t width_;
  uint32_t height_;
  uint32_t stride_;
  uint32_t bytespp_;
  uint32_t p1offset_;
  uint32_t p2offset_;
  uint32_t p3offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class CameraSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CameraSettings) */ {
 public:
  inline CameraSettings() : CameraSettings(nullptr) {}
  ~CameraSettings() override;
  explicit constexpr CameraSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraSettings(const CameraSettings& from);
  CameraSettings(CameraSettings&& from) noexcept
    : CameraSettings() {
    *this = ::std::move(from);
  }

  inline CameraSettings& operator=(const CameraSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraSettings& operator=(CameraSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraSettings* internal_default_instance() {
    return reinterpret_cast<const CameraSettings*>(
               &_CameraSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraSettings& a, CameraSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CameraSettings";
  }
  protected:
  explicit CameraSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExposureTimeUsFieldNumber = 1,
    kSensitivityIsoFieldNumber = 2,
    kLensPositionFieldNumber = 3,
    kWbColorTempFieldNumber = 4,
    kLensPositionRawFieldNumber = 5,
  };
  // int32 exposureTimeUs = 1;
  void clear_exposuretimeus();
  int32_t exposuretimeus() const;
  void set_exposuretimeus(int32_t value);
  private:
  int32_t _internal_exposuretimeus() const;
  void _internal_set_exposuretimeus(int32_t value);
  public:

  // int32 sensitivityIso = 2;
  void clear_sensitivityiso();
  int32_t sensitivityiso() const;
  void set_sensitivityiso(int32_t value);
  private:
  int32_t _internal_sensitivityiso() const;
  void _internal_set_sensitivityiso(int32_t value);
  public:

  // int32 lensPosition = 3;
  void clear_lensposition();
  int32_t lensposition() const;
  void set_lensposition(int32_t value);
  private:
  int32_t _internal_lensposition() const;
  void _internal_set_lensposition(int32_t value);
  public:

  // int32 wbColorTemp = 4;
  void clear_wbcolortemp();
  int32_t wbcolortemp() const;
  void set_wbcolortemp(int32_t value);
  private:
  int32_t _internal_wbcolortemp() const;
  void _internal_set_wbcolortemp(int32_t value);
  public:

  // float lensPositionRaw = 5;
  void clear_lenspositionraw();
  float lenspositionraw() const;
  void set_lenspositionraw(float value);
  private:
  float _internal_lenspositionraw() const;
  void _internal_set_lenspositionraw(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.CameraSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t exposuretimeus_;
  int32_t sensitivityiso_;
  int32_t lensposition_;
  int32_t wbcolortemp_;
  float lenspositionraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class ImgTransformations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ImgTransformations) */ {
 public:
  inline ImgTransformations() : ImgTransformations(nullptr) {}
  ~ImgTransformations() override;
  explicit constexpr ImgTransformations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgTransformations(const ImgTransformations& from);
  ImgTransformations(ImgTransformations&& from) noexcept
    : ImgTransformations() {
    *this = ::std::move(from);
  }

  inline ImgTransformations& operator=(const ImgTransformations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgTransformations& operator=(ImgTransformations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgTransformations& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgTransformations* internal_default_instance() {
    return reinterpret_cast<const ImgTransformations*>(
               &_ImgTransformations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImgTransformations& a, ImgTransformations& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgTransformations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgTransformations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImgTransformations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImgTransformations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgTransformations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgTransformations& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgTransformations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ImgTransformations";
  }
  protected:
  explicit ImgTransformations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformationsFieldNumber = 1,
    kInvalidFlagFieldNumber = 2,
  };
  // repeated .proto.ImgTransformation transformations = 1;
  int transformations_size() const;
  private:
  int _internal_transformations_size() const;
  public:
  void clear_transformations();
  ::proto::ImgTransformation* mutable_transformations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgTransformation >*
      mutable_transformations();
  private:
  const ::proto::ImgTransformation& _internal_transformations(int index) const;
  ::proto::ImgTransformation* _internal_add_transformations();
  public:
  const ::proto::ImgTransformation& transformations(int index) const;
  ::proto::ImgTransformation* add_transformations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgTransformation >&
      transformations() const;

  // bool invalidFlag = 2;
  void clear_invalidflag();
  bool invalidflag() const;
  void set_invalidflag(bool value);
  private:
  bool _internal_invalidflag() const;
  void _internal_set_invalidflag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ImgTransformations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgTransformation > transformations_;
  bool invalidflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class ImgTransformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ImgTransformation) */ {
 public:
  inline ImgTransformation() : ImgTransformation(nullptr) {}
  ~ImgTransformation() override;
  explicit constexpr ImgTransformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgTransformation(const ImgTransformation& from);
  ImgTransformation(ImgTransformation&& from) noexcept
    : ImgTransformation() {
    *this = ::std::move(from);
  }

  inline ImgTransformation& operator=(const ImgTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgTransformation& operator=(ImgTransformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgTransformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgTransformation* internal_default_instance() {
    return reinterpret_cast<const ImgTransformation*>(
               &_ImgTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImgTransformation& a, ImgTransformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgTransformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgTransformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImgTransformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImgTransformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgTransformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgTransformation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgTransformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ImgTransformation";
  }
  protected:
  explicit ImgTransformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformationMatrixFieldNumber = 10,
    kInvTransformationMatrixFieldNumber = 11,
    kTransformationTypeFieldNumber = 1,
    kTopLeftCropXFieldNumber = 2,
    kTopLeftCropYFieldNumber = 3,
    kBottomRightCropXFieldNumber = 4,
    kBottomRightCropYFieldNumber = 5,
    kTopPaddingFieldNumber = 6,
    kBottomPaddingFieldNumber = 7,
    kLeftPaddingFieldNumber = 8,
    kRightPaddingFieldNumber = 9,
    kAfterTransformWidthFieldNumber = 12,
    kAfterTransformHeightFieldNumber = 13,
    kBeforeTransformWidthFieldNumber = 14,
    kBeforeTransformHeightFieldNumber = 15,
  };
  // .proto.TransformationMatrix transformationMatrix = 10;
  bool has_transformationmatrix() const;
  private:
  bool _internal_has_transformationmatrix() const;
  public:
  void clear_transformationmatrix();
  const ::proto::TransformationMatrix& transformationmatrix() const;
  PROTOBUF_NODISCARD ::proto::TransformationMatrix* release_transformationmatrix();
  ::proto::TransformationMatrix* mutable_transformationmatrix();
  void set_allocated_transformationmatrix(::proto::TransformationMatrix* transformationmatrix);
  private:
  const ::proto::TransformationMatrix& _internal_transformationmatrix() const;
  ::proto::TransformationMatrix* _internal_mutable_transformationmatrix();
  public:
  void unsafe_arena_set_allocated_transformationmatrix(
      ::proto::TransformationMatrix* transformationmatrix);
  ::proto::TransformationMatrix* unsafe_arena_release_transformationmatrix();

  // .proto.TransformationMatrix invTransformationMatrix = 11;
  bool has_invtransformationmatrix() const;
  private:
  bool _internal_has_invtransformationmatrix() const;
  public:
  void clear_invtransformationmatrix();
  const ::proto::TransformationMatrix& invtransformationmatrix() const;
  PROTOBUF_NODISCARD ::proto::TransformationMatrix* release_invtransformationmatrix();
  ::proto::TransformationMatrix* mutable_invtransformationmatrix();
  void set_allocated_invtransformationmatrix(::proto::TransformationMatrix* invtransformationmatrix);
  private:
  const ::proto::TransformationMatrix& _internal_invtransformationmatrix() const;
  ::proto::TransformationMatrix* _internal_mutable_invtransformationmatrix();
  public:
  void unsafe_arena_set_allocated_invtransformationmatrix(
      ::proto::TransformationMatrix* invtransformationmatrix);
  ::proto::TransformationMatrix* unsafe_arena_release_invtransformationmatrix();

  // .proto.Transformation transformationType = 1;
  void clear_transformationtype();
  ::proto::Transformation transformationtype() const;
  void set_transformationtype(::proto::Transformation value);
  private:
  ::proto::Transformation _internal_transformationtype() const;
  void _internal_set_transformationtype(::proto::Transformation value);
  public:

  // int32 topLeftCropX = 2;
  void clear_topleftcropx();
  int32_t topleftcropx() const;
  void set_topleftcropx(int32_t value);
  private:
  int32_t _internal_topleftcropx() const;
  void _internal_set_topleftcropx(int32_t value);
  public:

  // int32 topLeftCropY = 3;
  void clear_topleftcropy();
  int32_t topleftcropy() const;
  void set_topleftcropy(int32_t value);
  private:
  int32_t _internal_topleftcropy() const;
  void _internal_set_topleftcropy(int32_t value);
  public:

  // int32 bottomRightCropX = 4;
  void clear_bottomrightcropx();
  int32_t bottomrightcropx() const;
  void set_bottomrightcropx(int32_t value);
  private:
  int32_t _internal_bottomrightcropx() const;
  void _internal_set_bottomrightcropx(int32_t value);
  public:

  // int32 bottomRightCropY = 5;
  void clear_bottomrightcropy();
  int32_t bottomrightcropy() const;
  void set_bottomrightcropy(int32_t value);
  private:
  int32_t _internal_bottomrightcropy() const;
  void _internal_set_bottomrightcropy(int32_t value);
  public:

  // int32 topPadding = 6;
  void clear_toppadding();
  int32_t toppadding() const;
  void set_toppadding(int32_t value);
  private:
  int32_t _internal_toppadding() const;
  void _internal_set_toppadding(int32_t value);
  public:

  // int32 bottomPadding = 7;
  void clear_bottompadding();
  int32_t bottompadding() const;
  void set_bottompadding(int32_t value);
  private:
  int32_t _internal_bottompadding() const;
  void _internal_set_bottompadding(int32_t value);
  public:

  // int32 leftPadding = 8;
  void clear_leftpadding();
  int32_t leftpadding() const;
  void set_leftpadding(int32_t value);
  private:
  int32_t _internal_leftpadding() const;
  void _internal_set_leftpadding(int32_t value);
  public:

  // int32 rightPadding = 9;
  void clear_rightpadding();
  int32_t rightpadding() const;
  void set_rightpadding(int32_t value);
  private:
  int32_t _internal_rightpadding() const;
  void _internal_set_rightpadding(int32_t value);
  public:

  // uint32 afterTransformWidth = 12;
  void clear_aftertransformwidth();
  uint32_t aftertransformwidth() const;
  void set_aftertransformwidth(uint32_t value);
  private:
  uint32_t _internal_aftertransformwidth() const;
  void _internal_set_aftertransformwidth(uint32_t value);
  public:

  // uint32 afterTransformHeight = 13;
  void clear_aftertransformheight();
  uint32_t aftertransformheight() const;
  void set_aftertransformheight(uint32_t value);
  private:
  uint32_t _internal_aftertransformheight() const;
  void _internal_set_aftertransformheight(uint32_t value);
  public:

  // uint32 beforeTransformWidth = 14;
  void clear_beforetransformwidth();
  uint32_t beforetransformwidth() const;
  void set_beforetransformwidth(uint32_t value);
  private:
  uint32_t _internal_beforetransformwidth() const;
  void _internal_set_beforetransformwidth(uint32_t value);
  public:

  // uint32 beforeTransformHeight = 15;
  void clear_beforetransformheight();
  uint32_t beforetransformheight() const;
  void set_beforetransformheight(uint32_t value);
  private:
  uint32_t _internal_beforetransformheight() const;
  void _internal_set_beforetransformheight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ImgTransformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::TransformationMatrix* transformationmatrix_;
  ::proto::TransformationMatrix* invtransformationmatrix_;
  int transformationtype_;
  int32_t topleftcropx_;
  int32_t topleftcropy_;
  int32_t bottomrightcropx_;
  int32_t bottomrightcropy_;
  int32_t toppadding_;
  int32_t bottompadding_;
  int32_t leftpadding_;
  int32_t rightpadding_;
  uint32_t aftertransformwidth_;
  uint32_t aftertransformheight_;
  uint32_t beforetransformwidth_;
  uint32_t beforetransformheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class TransformationMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TransformationMatrix) */ {
 public:
  inline TransformationMatrix() : TransformationMatrix(nullptr) {}
  ~TransformationMatrix() override;
  explicit constexpr TransformationMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformationMatrix(const TransformationMatrix& from);
  TransformationMatrix(TransformationMatrix&& from) noexcept
    : TransformationMatrix() {
    *this = ::std::move(from);
  }

  inline TransformationMatrix& operator=(const TransformationMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformationMatrix& operator=(TransformationMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformationMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformationMatrix* internal_default_instance() {
    return reinterpret_cast<const TransformationMatrix*>(
               &_TransformationMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransformationMatrix& a, TransformationMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformationMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformationMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformationMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformationMatrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformationMatrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformationMatrix& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformationMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TransformationMatrix";
  }
  protected:
  explicit TransformationMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArraysFieldNumber = 1,
  };
  // repeated .proto.FloatArray arrays = 1;
  int arrays_size() const;
  private:
  int _internal_arrays_size() const;
  public:
  void clear_arrays();
  ::proto::FloatArray* mutable_arrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FloatArray >*
      mutable_arrays();
  private:
  const ::proto::FloatArray& _internal_arrays(int index) const;
  ::proto::FloatArray* _internal_add_arrays();
  public:
  const ::proto::FloatArray& arrays(int index) const;
  ::proto::FloatArray* add_arrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FloatArray >&
      arrays() const;

  // @@protoc_insertion_point(class_scope:proto.TransformationMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FloatArray > arrays_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// -------------------------------------------------------------------

class FloatArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {}
  ~FloatArray() override;
  explicit constexpr FloatArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatArray(const FloatArray& from);
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FloatArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FloatArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FloatArray";
  }
  protected:
  explicit FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:proto.FloatArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgFrame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgFrame

// .proto.Timestamp ts = 1;
inline bool ImgFrame::_internal_has_ts() const {
  return this != internal_default_instance() && ts_ != nullptr;
}
inline bool ImgFrame::has_ts() const {
  return _internal_has_ts();
}
inline const ::proto::Timestamp& ImgFrame::_internal_ts() const {
  const ::proto::Timestamp* p = ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ImgFrame::ts() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.ts)
  return _internal_ts();
}
inline void ImgFrame::unsafe_arena_set_allocated_ts(
    ::proto::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_);
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.ts)
}
inline ::proto::Timestamp* ImgFrame::release_ts() {
  
  ::proto::Timestamp* temp = ts_;
  ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ImgFrame::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.ts)
  
  ::proto::Timestamp* temp = ts_;
  ts_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ImgFrame::_internal_mutable_ts() {
  
  if (ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    ts_ = p;
  }
  return ts_;
}
inline ::proto::Timestamp* ImgFrame::mutable_ts() {
  ::proto::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.ts)
  return _msg;
}
inline void ImgFrame::set_allocated_ts(::proto::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_);
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts));
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    
  } else {
    
  }
  ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.ts)
}

// .proto.Timestamp tsDevice = 2;
inline bool ImgFrame::_internal_has_tsdevice() const {
  return this != internal_default_instance() && tsdevice_ != nullptr;
}
inline bool ImgFrame::has_tsdevice() const {
  return _internal_has_tsdevice();
}
inline const ::proto::Timestamp& ImgFrame::_internal_tsdevice() const {
  const ::proto::Timestamp* p = tsdevice_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ImgFrame::tsdevice() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.tsDevice)
  return _internal_tsdevice();
}
inline void ImgFrame::unsafe_arena_set_allocated_tsdevice(
    ::proto::Timestamp* tsdevice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsdevice_);
  }
  tsdevice_ = tsdevice;
  if (tsdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.tsDevice)
}
inline ::proto::Timestamp* ImgFrame::release_tsdevice() {
  
  ::proto::Timestamp* temp = tsdevice_;
  tsdevice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ImgFrame::unsafe_arena_release_tsdevice() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.tsDevice)
  
  ::proto::Timestamp* temp = tsdevice_;
  tsdevice_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ImgFrame::_internal_mutable_tsdevice() {
  
  if (tsdevice_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    tsdevice_ = p;
  }
  return tsdevice_;
}
inline ::proto::Timestamp* ImgFrame::mutable_tsdevice() {
  ::proto::Timestamp* _msg = _internal_mutable_tsdevice();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.tsDevice)
  return _msg;
}
inline void ImgFrame::set_allocated_tsdevice(::proto::Timestamp* tsdevice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsdevice_);
  }
  if (tsdevice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsdevice));
    if (message_arena != submessage_arena) {
      tsdevice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsdevice, submessage_arena);
    }
    
  } else {
    
  }
  tsdevice_ = tsdevice;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.tsDevice)
}

// int64 sequenceNum = 3;
inline void ImgFrame::clear_sequencenum() {
  sequencenum_ = int64_t{0};
}
inline int64_t ImgFrame::_internal_sequencenum() const {
  return sequencenum_;
}
inline int64_t ImgFrame::sequencenum() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.sequenceNum)
  return _internal_sequencenum();
}
inline void ImgFrame::_internal_set_sequencenum(int64_t value) {
  
  sequencenum_ = value;
}
inline void ImgFrame::set_sequencenum(int64_t value) {
  _internal_set_sequencenum(value);
  // @@protoc_insertion_point(field_set:proto.ImgFrame.sequenceNum)
}

// .proto.Specs fb = 4;
inline bool ImgFrame::_internal_has_fb() const {
  return this != internal_default_instance() && fb_ != nullptr;
}
inline bool ImgFrame::has_fb() const {
  return _internal_has_fb();
}
inline void ImgFrame::clear_fb() {
  if (GetArenaForAllocation() == nullptr && fb_ != nullptr) {
    delete fb_;
  }
  fb_ = nullptr;
}
inline const ::proto::Specs& ImgFrame::_internal_fb() const {
  const ::proto::Specs* p = fb_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Specs&>(
      ::proto::_Specs_default_instance_);
}
inline const ::proto::Specs& ImgFrame::fb() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.fb)
  return _internal_fb();
}
inline void ImgFrame::unsafe_arena_set_allocated_fb(
    ::proto::Specs* fb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fb_);
  }
  fb_ = fb;
  if (fb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.fb)
}
inline ::proto::Specs* ImgFrame::release_fb() {
  
  ::proto::Specs* temp = fb_;
  fb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Specs* ImgFrame::unsafe_arena_release_fb() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.fb)
  
  ::proto::Specs* temp = fb_;
  fb_ = nullptr;
  return temp;
}
inline ::proto::Specs* ImgFrame::_internal_mutable_fb() {
  
  if (fb_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Specs>(GetArenaForAllocation());
    fb_ = p;
  }
  return fb_;
}
inline ::proto::Specs* ImgFrame::mutable_fb() {
  ::proto::Specs* _msg = _internal_mutable_fb();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.fb)
  return _msg;
}
inline void ImgFrame::set_allocated_fb(::proto::Specs* fb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fb_;
  }
  if (fb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Specs>::GetOwningArena(fb);
    if (message_arena != submessage_arena) {
      fb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fb, submessage_arena);
    }
    
  } else {
    
  }
  fb_ = fb;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.fb)
}

// .proto.Specs sourceFb = 5;
inline bool ImgFrame::_internal_has_sourcefb() const {
  return this != internal_default_instance() && sourcefb_ != nullptr;
}
inline bool ImgFrame::has_sourcefb() const {
  return _internal_has_sourcefb();
}
inline void ImgFrame::clear_sourcefb() {
  if (GetArenaForAllocation() == nullptr && sourcefb_ != nullptr) {
    delete sourcefb_;
  }
  sourcefb_ = nullptr;
}
inline const ::proto::Specs& ImgFrame::_internal_sourcefb() const {
  const ::proto::Specs* p = sourcefb_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Specs&>(
      ::proto::_Specs_default_instance_);
}
inline const ::proto::Specs& ImgFrame::sourcefb() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.sourceFb)
  return _internal_sourcefb();
}
inline void ImgFrame::unsafe_arena_set_allocated_sourcefb(
    ::proto::Specs* sourcefb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcefb_);
  }
  sourcefb_ = sourcefb;
  if (sourcefb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.sourceFb)
}
inline ::proto::Specs* ImgFrame::release_sourcefb() {
  
  ::proto::Specs* temp = sourcefb_;
  sourcefb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Specs* ImgFrame::unsafe_arena_release_sourcefb() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.sourceFb)
  
  ::proto::Specs* temp = sourcefb_;
  sourcefb_ = nullptr;
  return temp;
}
inline ::proto::Specs* ImgFrame::_internal_mutable_sourcefb() {
  
  if (sourcefb_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Specs>(GetArenaForAllocation());
    sourcefb_ = p;
  }
  return sourcefb_;
}
inline ::proto::Specs* ImgFrame::mutable_sourcefb() {
  ::proto::Specs* _msg = _internal_mutable_sourcefb();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.sourceFb)
  return _msg;
}
inline void ImgFrame::set_allocated_sourcefb(::proto::Specs* sourcefb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sourcefb_;
  }
  if (sourcefb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Specs>::GetOwningArena(sourcefb);
    if (message_arena != submessage_arena) {
      sourcefb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcefb, submessage_arena);
    }
    
  } else {
    
  }
  sourcefb_ = sourcefb;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.sourceFb)
}

// .proto.CameraSettings cam = 6;
inline bool ImgFrame::_internal_has_cam() const {
  return this != internal_default_instance() && cam_ != nullptr;
}
inline bool ImgFrame::has_cam() const {
  return _internal_has_cam();
}
inline void ImgFrame::clear_cam() {
  if (GetArenaForAllocation() == nullptr && cam_ != nullptr) {
    delete cam_;
  }
  cam_ = nullptr;
}
inline const ::proto::CameraSettings& ImgFrame::_internal_cam() const {
  const ::proto::CameraSettings* p = cam_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::CameraSettings&>(
      ::proto::_CameraSettings_default_instance_);
}
inline const ::proto::CameraSettings& ImgFrame::cam() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.cam)
  return _internal_cam();
}
inline void ImgFrame::unsafe_arena_set_allocated_cam(
    ::proto::CameraSettings* cam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cam_);
  }
  cam_ = cam;
  if (cam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.cam)
}
inline ::proto::CameraSettings* ImgFrame::release_cam() {
  
  ::proto::CameraSettings* temp = cam_;
  cam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::CameraSettings* ImgFrame::unsafe_arena_release_cam() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.cam)
  
  ::proto::CameraSettings* temp = cam_;
  cam_ = nullptr;
  return temp;
}
inline ::proto::CameraSettings* ImgFrame::_internal_mutable_cam() {
  
  if (cam_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::CameraSettings>(GetArenaForAllocation());
    cam_ = p;
  }
  return cam_;
}
inline ::proto::CameraSettings* ImgFrame::mutable_cam() {
  ::proto::CameraSettings* _msg = _internal_mutable_cam();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.cam)
  return _msg;
}
inline void ImgFrame::set_allocated_cam(::proto::CameraSettings* cam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cam_;
  }
  if (cam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::CameraSettings>::GetOwningArena(cam);
    if (message_arena != submessage_arena) {
      cam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cam, submessage_arena);
    }
    
  } else {
    
  }
  cam_ = cam;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.cam)
}

// float HFovDegrees = 7;
inline void ImgFrame::clear_hfovdegrees() {
  hfovdegrees_ = 0;
}
inline float ImgFrame::_internal_hfovdegrees() const {
  return hfovdegrees_;
}
inline float ImgFrame::hfovdegrees() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.HFovDegrees)
  return _internal_hfovdegrees();
}
inline void ImgFrame::_internal_set_hfovdegrees(float value) {
  
  hfovdegrees_ = value;
}
inline void ImgFrame::set_hfovdegrees(float value) {
  _internal_set_hfovdegrees(value);
  // @@protoc_insertion_point(field_set:proto.ImgFrame.HFovDegrees)
}

// uint32 instanceNum = 8;
inline void ImgFrame::clear_instancenum() {
  instancenum_ = 0u;
}
inline uint32_t ImgFrame::_internal_instancenum() const {
  return instancenum_;
}
inline uint32_t ImgFrame::instancenum() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.instanceNum)
  return _internal_instancenum();
}
inline void ImgFrame::_internal_set_instancenum(uint32_t value) {
  
  instancenum_ = value;
}
inline void ImgFrame::set_instancenum(uint32_t value) {
  _internal_set_instancenum(value);
  // @@protoc_insertion_point(field_set:proto.ImgFrame.instanceNum)
}

// .proto.ImgTransformations transformations = 9;
inline bool ImgFrame::_internal_has_transformations() const {
  return this != internal_default_instance() && transformations_ != nullptr;
}
inline bool ImgFrame::has_transformations() const {
  return _internal_has_transformations();
}
inline void ImgFrame::clear_transformations() {
  if (GetArenaForAllocation() == nullptr && transformations_ != nullptr) {
    delete transformations_;
  }
  transformations_ = nullptr;
}
inline const ::proto::ImgTransformations& ImgFrame::_internal_transformations() const {
  const ::proto::ImgTransformations* p = transformations_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ImgTransformations&>(
      ::proto::_ImgTransformations_default_instance_);
}
inline const ::proto::ImgTransformations& ImgFrame::transformations() const {
  // @@protoc_insertion_point(field_get:proto.ImgFrame.transformations)
  return _internal_transformations();
}
inline void ImgFrame::unsafe_arena_set_allocated_transformations(
    ::proto::ImgTransformations* transformations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformations_);
  }
  transformations_ = transformations;
  if (transformations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgFrame.transformations)
}
inline ::proto::ImgTransformations* ImgFrame::release_transformations() {
  
  ::proto::ImgTransformations* temp = transformations_;
  transformations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ImgTransformations* ImgFrame::unsafe_arena_release_transformations() {
  // @@protoc_insertion_point(field_release:proto.ImgFrame.transformations)
  
  ::proto::ImgTransformations* temp = transformations_;
  transformations_ = nullptr;
  return temp;
}
inline ::proto::ImgTransformations* ImgFrame::_internal_mutable_transformations() {
  
  if (transformations_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ImgTransformations>(GetArenaForAllocation());
    transformations_ = p;
  }
  return transformations_;
}
inline ::proto::ImgTransformations* ImgFrame::mutable_transformations() {
  ::proto::ImgTransformations* _msg = _internal_mutable_transformations();
  // @@protoc_insertion_point(field_mutable:proto.ImgFrame.transformations)
  return _msg;
}
inline void ImgFrame::set_allocated_transformations(::proto::ImgTransformations* transformations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transformations_;
  }
  if (transformations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::ImgTransformations>::GetOwningArena(transformations);
    if (message_arena != submessage_arena) {
      transformations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformations, submessage_arena);
    }
    
  } else {
    
  }
  transformations_ = transformations;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgFrame.transformations)
}

// -------------------------------------------------------------------

// Specs

// .proto.Type type = 1;
inline void Specs::clear_type() {
  type_ = 0;
}
inline ::proto::Type Specs::_internal_type() const {
  return static_cast< ::proto::Type >(type_);
}
inline ::proto::Type Specs::type() const {
  // @@protoc_insertion_point(field_get:proto.Specs.type)
  return _internal_type();
}
inline void Specs::_internal_set_type(::proto::Type value) {
  
  type_ = value;
}
inline void Specs::set_type(::proto::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.Specs.type)
}

// uint32 width = 2;
inline void Specs::clear_width() {
  width_ = 0u;
}
inline uint32_t Specs::_internal_width() const {
  return width_;
}
inline uint32_t Specs::width() const {
  // @@protoc_insertion_point(field_get:proto.Specs.width)
  return _internal_width();
}
inline void Specs::_internal_set_width(uint32_t value) {
  
  width_ = value;
}
inline void Specs::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.Specs.width)
}

// uint32 height = 3;
inline void Specs::clear_height() {
  height_ = 0u;
}
inline uint32_t Specs::_internal_height() const {
  return height_;
}
inline uint32_t Specs::height() const {
  // @@protoc_insertion_point(field_get:proto.Specs.height)
  return _internal_height();
}
inline void Specs::_internal_set_height(uint32_t value) {
  
  height_ = value;
}
inline void Specs::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.Specs.height)
}

// uint32 stride = 4;
inline void Specs::clear_stride() {
  stride_ = 0u;
}
inline uint32_t Specs::_internal_stride() const {
  return stride_;
}
inline uint32_t Specs::stride() const {
  // @@protoc_insertion_point(field_get:proto.Specs.stride)
  return _internal_stride();
}
inline void Specs::_internal_set_stride(uint32_t value) {
  
  stride_ = value;
}
inline void Specs::set_stride(uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:proto.Specs.stride)
}

// uint32 bytesPP = 5;
inline void Specs::clear_bytespp() {
  bytespp_ = 0u;
}
inline uint32_t Specs::_internal_bytespp() const {
  return bytespp_;
}
inline uint32_t Specs::bytespp() const {
  // @@protoc_insertion_point(field_get:proto.Specs.bytesPP)
  return _internal_bytespp();
}
inline void Specs::_internal_set_bytespp(uint32_t value) {
  
  bytespp_ = value;
}
inline void Specs::set_bytespp(uint32_t value) {
  _internal_set_bytespp(value);
  // @@protoc_insertion_point(field_set:proto.Specs.bytesPP)
}

// uint32 p1Offset = 6;
inline void Specs::clear_p1offset() {
  p1offset_ = 0u;
}
inline uint32_t Specs::_internal_p1offset() const {
  return p1offset_;
}
inline uint32_t Specs::p1offset() const {
  // @@protoc_insertion_point(field_get:proto.Specs.p1Offset)
  return _internal_p1offset();
}
inline void Specs::_internal_set_p1offset(uint32_t value) {
  
  p1offset_ = value;
}
inline void Specs::set_p1offset(uint32_t value) {
  _internal_set_p1offset(value);
  // @@protoc_insertion_point(field_set:proto.Specs.p1Offset)
}

// uint32 p2Offset = 7;
inline void Specs::clear_p2offset() {
  p2offset_ = 0u;
}
inline uint32_t Specs::_internal_p2offset() const {
  return p2offset_;
}
inline uint32_t Specs::p2offset() const {
  // @@protoc_insertion_point(field_get:proto.Specs.p2Offset)
  return _internal_p2offset();
}
inline void Specs::_internal_set_p2offset(uint32_t value) {
  
  p2offset_ = value;
}
inline void Specs::set_p2offset(uint32_t value) {
  _internal_set_p2offset(value);
  // @@protoc_insertion_point(field_set:proto.Specs.p2Offset)
}

// uint32 p3Offset = 8;
inline void Specs::clear_p3offset() {
  p3offset_ = 0u;
}
inline uint32_t Specs::_internal_p3offset() const {
  return p3offset_;
}
inline uint32_t Specs::p3offset() const {
  // @@protoc_insertion_point(field_get:proto.Specs.p3Offset)
  return _internal_p3offset();
}
inline void Specs::_internal_set_p3offset(uint32_t value) {
  
  p3offset_ = value;
}
inline void Specs::set_p3offset(uint32_t value) {
  _internal_set_p3offset(value);
  // @@protoc_insertion_point(field_set:proto.Specs.p3Offset)
}

// -------------------------------------------------------------------

// CameraSettings

// int32 exposureTimeUs = 1;
inline void CameraSettings::clear_exposuretimeus() {
  exposuretimeus_ = 0;
}
inline int32_t CameraSettings::_internal_exposuretimeus() const {
  return exposuretimeus_;
}
inline int32_t CameraSettings::exposuretimeus() const {
  // @@protoc_insertion_point(field_get:proto.CameraSettings.exposureTimeUs)
  return _internal_exposuretimeus();
}
inline void CameraSettings::_internal_set_exposuretimeus(int32_t value) {
  
  exposuretimeus_ = value;
}
inline void CameraSettings::set_exposuretimeus(int32_t value) {
  _internal_set_exposuretimeus(value);
  // @@protoc_insertion_point(field_set:proto.CameraSettings.exposureTimeUs)
}

// int32 sensitivityIso = 2;
inline void CameraSettings::clear_sensitivityiso() {
  sensitivityiso_ = 0;
}
inline int32_t CameraSettings::_internal_sensitivityiso() const {
  return sensitivityiso_;
}
inline int32_t CameraSettings::sensitivityiso() const {
  // @@protoc_insertion_point(field_get:proto.CameraSettings.sensitivityIso)
  return _internal_sensitivityiso();
}
inline void CameraSettings::_internal_set_sensitivityiso(int32_t value) {
  
  sensitivityiso_ = value;
}
inline void CameraSettings::set_sensitivityiso(int32_t value) {
  _internal_set_sensitivityiso(value);
  // @@protoc_insertion_point(field_set:proto.CameraSettings.sensitivityIso)
}

// int32 lensPosition = 3;
inline void CameraSettings::clear_lensposition() {
  lensposition_ = 0;
}
inline int32_t CameraSettings::_internal_lensposition() const {
  return lensposition_;
}
inline int32_t CameraSettings::lensposition() const {
  // @@protoc_insertion_point(field_get:proto.CameraSettings.lensPosition)
  return _internal_lensposition();
}
inline void CameraSettings::_internal_set_lensposition(int32_t value) {
  
  lensposition_ = value;
}
inline void CameraSettings::set_lensposition(int32_t value) {
  _internal_set_lensposition(value);
  // @@protoc_insertion_point(field_set:proto.CameraSettings.lensPosition)
}

// int32 wbColorTemp = 4;
inline void CameraSettings::clear_wbcolortemp() {
  wbcolortemp_ = 0;
}
inline int32_t CameraSettings::_internal_wbcolortemp() const {
  return wbcolortemp_;
}
inline int32_t CameraSettings::wbcolortemp() const {
  // @@protoc_insertion_point(field_get:proto.CameraSettings.wbColorTemp)
  return _internal_wbcolortemp();
}
inline void CameraSettings::_internal_set_wbcolortemp(int32_t value) {
  
  wbcolortemp_ = value;
}
inline void CameraSettings::set_wbcolortemp(int32_t value) {
  _internal_set_wbcolortemp(value);
  // @@protoc_insertion_point(field_set:proto.CameraSettings.wbColorTemp)
}

// float lensPositionRaw = 5;
inline void CameraSettings::clear_lenspositionraw() {
  lenspositionraw_ = 0;
}
inline float CameraSettings::_internal_lenspositionraw() const {
  return lenspositionraw_;
}
inline float CameraSettings::lenspositionraw() const {
  // @@protoc_insertion_point(field_get:proto.CameraSettings.lensPositionRaw)
  return _internal_lenspositionraw();
}
inline void CameraSettings::_internal_set_lenspositionraw(float value) {
  
  lenspositionraw_ = value;
}
inline void CameraSettings::set_lenspositionraw(float value) {
  _internal_set_lenspositionraw(value);
  // @@protoc_insertion_point(field_set:proto.CameraSettings.lensPositionRaw)
}

// -------------------------------------------------------------------

// ImgTransformations

// repeated .proto.ImgTransformation transformations = 1;
inline int ImgTransformations::_internal_transformations_size() const {
  return transformations_.size();
}
inline int ImgTransformations::transformations_size() const {
  return _internal_transformations_size();
}
inline void ImgTransformations::clear_transformations() {
  transformations_.Clear();
}
inline ::proto::ImgTransformation* ImgTransformations::mutable_transformations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ImgTransformations.transformations)
  return transformations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgTransformation >*
ImgTransformations::mutable_transformations() {
  // @@protoc_insertion_point(field_mutable_list:proto.ImgTransformations.transformations)
  return &transformations_;
}
inline const ::proto::ImgTransformation& ImgTransformations::_internal_transformations(int index) const {
  return transformations_.Get(index);
}
inline const ::proto::ImgTransformation& ImgTransformations::transformations(int index) const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformations.transformations)
  return _internal_transformations(index);
}
inline ::proto::ImgTransformation* ImgTransformations::_internal_add_transformations() {
  return transformations_.Add();
}
inline ::proto::ImgTransformation* ImgTransformations::add_transformations() {
  ::proto::ImgTransformation* _add = _internal_add_transformations();
  // @@protoc_insertion_point(field_add:proto.ImgTransformations.transformations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgTransformation >&
ImgTransformations::transformations() const {
  // @@protoc_insertion_point(field_list:proto.ImgTransformations.transformations)
  return transformations_;
}

// bool invalidFlag = 2;
inline void ImgTransformations::clear_invalidflag() {
  invalidflag_ = false;
}
inline bool ImgTransformations::_internal_invalidflag() const {
  return invalidflag_;
}
inline bool ImgTransformations::invalidflag() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformations.invalidFlag)
  return _internal_invalidflag();
}
inline void ImgTransformations::_internal_set_invalidflag(bool value) {
  
  invalidflag_ = value;
}
inline void ImgTransformations::set_invalidflag(bool value) {
  _internal_set_invalidflag(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformations.invalidFlag)
}

// -------------------------------------------------------------------

// ImgTransformation

// .proto.Transformation transformationType = 1;
inline void ImgTransformation::clear_transformationtype() {
  transformationtype_ = 0;
}
inline ::proto::Transformation ImgTransformation::_internal_transformationtype() const {
  return static_cast< ::proto::Transformation >(transformationtype_);
}
inline ::proto::Transformation ImgTransformation::transformationtype() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.transformationType)
  return _internal_transformationtype();
}
inline void ImgTransformation::_internal_set_transformationtype(::proto::Transformation value) {
  
  transformationtype_ = value;
}
inline void ImgTransformation::set_transformationtype(::proto::Transformation value) {
  _internal_set_transformationtype(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.transformationType)
}

// int32 topLeftCropX = 2;
inline void ImgTransformation::clear_topleftcropx() {
  topleftcropx_ = 0;
}
inline int32_t ImgTransformation::_internal_topleftcropx() const {
  return topleftcropx_;
}
inline int32_t ImgTransformation::topleftcropx() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.topLeftCropX)
  return _internal_topleftcropx();
}
inline void ImgTransformation::_internal_set_topleftcropx(int32_t value) {
  
  topleftcropx_ = value;
}
inline void ImgTransformation::set_topleftcropx(int32_t value) {
  _internal_set_topleftcropx(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.topLeftCropX)
}

// int32 topLeftCropY = 3;
inline void ImgTransformation::clear_topleftcropy() {
  topleftcropy_ = 0;
}
inline int32_t ImgTransformation::_internal_topleftcropy() const {
  return topleftcropy_;
}
inline int32_t ImgTransformation::topleftcropy() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.topLeftCropY)
  return _internal_topleftcropy();
}
inline void ImgTransformation::_internal_set_topleftcropy(int32_t value) {
  
  topleftcropy_ = value;
}
inline void ImgTransformation::set_topleftcropy(int32_t value) {
  _internal_set_topleftcropy(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.topLeftCropY)
}

// int32 bottomRightCropX = 4;
inline void ImgTransformation::clear_bottomrightcropx() {
  bottomrightcropx_ = 0;
}
inline int32_t ImgTransformation::_internal_bottomrightcropx() const {
  return bottomrightcropx_;
}
inline int32_t ImgTransformation::bottomrightcropx() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.bottomRightCropX)
  return _internal_bottomrightcropx();
}
inline void ImgTransformation::_internal_set_bottomrightcropx(int32_t value) {
  
  bottomrightcropx_ = value;
}
inline void ImgTransformation::set_bottomrightcropx(int32_t value) {
  _internal_set_bottomrightcropx(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.bottomRightCropX)
}

// int32 bottomRightCropY = 5;
inline void ImgTransformation::clear_bottomrightcropy() {
  bottomrightcropy_ = 0;
}
inline int32_t ImgTransformation::_internal_bottomrightcropy() const {
  return bottomrightcropy_;
}
inline int32_t ImgTransformation::bottomrightcropy() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.bottomRightCropY)
  return _internal_bottomrightcropy();
}
inline void ImgTransformation::_internal_set_bottomrightcropy(int32_t value) {
  
  bottomrightcropy_ = value;
}
inline void ImgTransformation::set_bottomrightcropy(int32_t value) {
  _internal_set_bottomrightcropy(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.bottomRightCropY)
}

// int32 topPadding = 6;
inline void ImgTransformation::clear_toppadding() {
  toppadding_ = 0;
}
inline int32_t ImgTransformation::_internal_toppadding() const {
  return toppadding_;
}
inline int32_t ImgTransformation::toppadding() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.topPadding)
  return _internal_toppadding();
}
inline void ImgTransformation::_internal_set_toppadding(int32_t value) {
  
  toppadding_ = value;
}
inline void ImgTransformation::set_toppadding(int32_t value) {
  _internal_set_toppadding(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.topPadding)
}

// int32 bottomPadding = 7;
inline void ImgTransformation::clear_bottompadding() {
  bottompadding_ = 0;
}
inline int32_t ImgTransformation::_internal_bottompadding() const {
  return bottompadding_;
}
inline int32_t ImgTransformation::bottompadding() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.bottomPadding)
  return _internal_bottompadding();
}
inline void ImgTransformation::_internal_set_bottompadding(int32_t value) {
  
  bottompadding_ = value;
}
inline void ImgTransformation::set_bottompadding(int32_t value) {
  _internal_set_bottompadding(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.bottomPadding)
}

// int32 leftPadding = 8;
inline void ImgTransformation::clear_leftpadding() {
  leftpadding_ = 0;
}
inline int32_t ImgTransformation::_internal_leftpadding() const {
  return leftpadding_;
}
inline int32_t ImgTransformation::leftpadding() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.leftPadding)
  return _internal_leftpadding();
}
inline void ImgTransformation::_internal_set_leftpadding(int32_t value) {
  
  leftpadding_ = value;
}
inline void ImgTransformation::set_leftpadding(int32_t value) {
  _internal_set_leftpadding(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.leftPadding)
}

// int32 rightPadding = 9;
inline void ImgTransformation::clear_rightpadding() {
  rightpadding_ = 0;
}
inline int32_t ImgTransformation::_internal_rightpadding() const {
  return rightpadding_;
}
inline int32_t ImgTransformation::rightpadding() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.rightPadding)
  return _internal_rightpadding();
}
inline void ImgTransformation::_internal_set_rightpadding(int32_t value) {
  
  rightpadding_ = value;
}
inline void ImgTransformation::set_rightpadding(int32_t value) {
  _internal_set_rightpadding(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.rightPadding)
}

// .proto.TransformationMatrix transformationMatrix = 10;
inline bool ImgTransformation::_internal_has_transformationmatrix() const {
  return this != internal_default_instance() && transformationmatrix_ != nullptr;
}
inline bool ImgTransformation::has_transformationmatrix() const {
  return _internal_has_transformationmatrix();
}
inline void ImgTransformation::clear_transformationmatrix() {
  if (GetArenaForAllocation() == nullptr && transformationmatrix_ != nullptr) {
    delete transformationmatrix_;
  }
  transformationmatrix_ = nullptr;
}
inline const ::proto::TransformationMatrix& ImgTransformation::_internal_transformationmatrix() const {
  const ::proto::TransformationMatrix* p = transformationmatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransformationMatrix&>(
      ::proto::_TransformationMatrix_default_instance_);
}
inline const ::proto::TransformationMatrix& ImgTransformation::transformationmatrix() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.transformationMatrix)
  return _internal_transformationmatrix();
}
inline void ImgTransformation::unsafe_arena_set_allocated_transformationmatrix(
    ::proto::TransformationMatrix* transformationmatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transformationmatrix_);
  }
  transformationmatrix_ = transformationmatrix;
  if (transformationmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgTransformation.transformationMatrix)
}
inline ::proto::TransformationMatrix* ImgTransformation::release_transformationmatrix() {
  
  ::proto::TransformationMatrix* temp = transformationmatrix_;
  transformationmatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransformationMatrix* ImgTransformation::unsafe_arena_release_transformationmatrix() {
  // @@protoc_insertion_point(field_release:proto.ImgTransformation.transformationMatrix)
  
  ::proto::TransformationMatrix* temp = transformationmatrix_;
  transformationmatrix_ = nullptr;
  return temp;
}
inline ::proto::TransformationMatrix* ImgTransformation::_internal_mutable_transformationmatrix() {
  
  if (transformationmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransformationMatrix>(GetArenaForAllocation());
    transformationmatrix_ = p;
  }
  return transformationmatrix_;
}
inline ::proto::TransformationMatrix* ImgTransformation::mutable_transformationmatrix() {
  ::proto::TransformationMatrix* _msg = _internal_mutable_transformationmatrix();
  // @@protoc_insertion_point(field_mutable:proto.ImgTransformation.transformationMatrix)
  return _msg;
}
inline void ImgTransformation::set_allocated_transformationmatrix(::proto::TransformationMatrix* transformationmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete transformationmatrix_;
  }
  if (transformationmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::TransformationMatrix>::GetOwningArena(transformationmatrix);
    if (message_arena != submessage_arena) {
      transformationmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformationmatrix, submessage_arena);
    }
    
  } else {
    
  }
  transformationmatrix_ = transformationmatrix;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgTransformation.transformationMatrix)
}

// .proto.TransformationMatrix invTransformationMatrix = 11;
inline bool ImgTransformation::_internal_has_invtransformationmatrix() const {
  return this != internal_default_instance() && invtransformationmatrix_ != nullptr;
}
inline bool ImgTransformation::has_invtransformationmatrix() const {
  return _internal_has_invtransformationmatrix();
}
inline void ImgTransformation::clear_invtransformationmatrix() {
  if (GetArenaForAllocation() == nullptr && invtransformationmatrix_ != nullptr) {
    delete invtransformationmatrix_;
  }
  invtransformationmatrix_ = nullptr;
}
inline const ::proto::TransformationMatrix& ImgTransformation::_internal_invtransformationmatrix() const {
  const ::proto::TransformationMatrix* p = invtransformationmatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TransformationMatrix&>(
      ::proto::_TransformationMatrix_default_instance_);
}
inline const ::proto::TransformationMatrix& ImgTransformation::invtransformationmatrix() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.invTransformationMatrix)
  return _internal_invtransformationmatrix();
}
inline void ImgTransformation::unsafe_arena_set_allocated_invtransformationmatrix(
    ::proto::TransformationMatrix* invtransformationmatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invtransformationmatrix_);
  }
  invtransformationmatrix_ = invtransformationmatrix;
  if (invtransformationmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgTransformation.invTransformationMatrix)
}
inline ::proto::TransformationMatrix* ImgTransformation::release_invtransformationmatrix() {
  
  ::proto::TransformationMatrix* temp = invtransformationmatrix_;
  invtransformationmatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TransformationMatrix* ImgTransformation::unsafe_arena_release_invtransformationmatrix() {
  // @@protoc_insertion_point(field_release:proto.ImgTransformation.invTransformationMatrix)
  
  ::proto::TransformationMatrix* temp = invtransformationmatrix_;
  invtransformationmatrix_ = nullptr;
  return temp;
}
inline ::proto::TransformationMatrix* ImgTransformation::_internal_mutable_invtransformationmatrix() {
  
  if (invtransformationmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TransformationMatrix>(GetArenaForAllocation());
    invtransformationmatrix_ = p;
  }
  return invtransformationmatrix_;
}
inline ::proto::TransformationMatrix* ImgTransformation::mutable_invtransformationmatrix() {
  ::proto::TransformationMatrix* _msg = _internal_mutable_invtransformationmatrix();
  // @@protoc_insertion_point(field_mutable:proto.ImgTransformation.invTransformationMatrix)
  return _msg;
}
inline void ImgTransformation::set_allocated_invtransformationmatrix(::proto::TransformationMatrix* invtransformationmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete invtransformationmatrix_;
  }
  if (invtransformationmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::TransformationMatrix>::GetOwningArena(invtransformationmatrix);
    if (message_arena != submessage_arena) {
      invtransformationmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invtransformationmatrix, submessage_arena);
    }
    
  } else {
    
  }
  invtransformationmatrix_ = invtransformationmatrix;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgTransformation.invTransformationMatrix)
}

// uint32 afterTransformWidth = 12;
inline void ImgTransformation::clear_aftertransformwidth() {
  aftertransformwidth_ = 0u;
}
inline uint32_t ImgTransformation::_internal_aftertransformwidth() const {
  return aftertransformwidth_;
}
inline uint32_t ImgTransformation::aftertransformwidth() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.afterTransformWidth)
  return _internal_aftertransformwidth();
}
inline void ImgTransformation::_internal_set_aftertransformwidth(uint32_t value) {
  
  aftertransformwidth_ = value;
}
inline void ImgTransformation::set_aftertransformwidth(uint32_t value) {
  _internal_set_aftertransformwidth(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.afterTransformWidth)
}

// uint32 afterTransformHeight = 13;
inline void ImgTransformation::clear_aftertransformheight() {
  aftertransformheight_ = 0u;
}
inline uint32_t ImgTransformation::_internal_aftertransformheight() const {
  return aftertransformheight_;
}
inline uint32_t ImgTransformation::aftertransformheight() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.afterTransformHeight)
  return _internal_aftertransformheight();
}
inline void ImgTransformation::_internal_set_aftertransformheight(uint32_t value) {
  
  aftertransformheight_ = value;
}
inline void ImgTransformation::set_aftertransformheight(uint32_t value) {
  _internal_set_aftertransformheight(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.afterTransformHeight)
}

// uint32 beforeTransformWidth = 14;
inline void ImgTransformation::clear_beforetransformwidth() {
  beforetransformwidth_ = 0u;
}
inline uint32_t ImgTransformation::_internal_beforetransformwidth() const {
  return beforetransformwidth_;
}
inline uint32_t ImgTransformation::beforetransformwidth() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.beforeTransformWidth)
  return _internal_beforetransformwidth();
}
inline void ImgTransformation::_internal_set_beforetransformwidth(uint32_t value) {
  
  beforetransformwidth_ = value;
}
inline void ImgTransformation::set_beforetransformwidth(uint32_t value) {
  _internal_set_beforetransformwidth(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.beforeTransformWidth)
}

// uint32 beforeTransformHeight = 15;
inline void ImgTransformation::clear_beforetransformheight() {
  beforetransformheight_ = 0u;
}
inline uint32_t ImgTransformation::_internal_beforetransformheight() const {
  return beforetransformheight_;
}
inline uint32_t ImgTransformation::beforetransformheight() const {
  // @@protoc_insertion_point(field_get:proto.ImgTransformation.beforeTransformHeight)
  return _internal_beforetransformheight();
}
inline void ImgTransformation::_internal_set_beforetransformheight(uint32_t value) {
  
  beforetransformheight_ = value;
}
inline void ImgTransformation::set_beforetransformheight(uint32_t value) {
  _internal_set_beforetransformheight(value);
  // @@protoc_insertion_point(field_set:proto.ImgTransformation.beforeTransformHeight)
}

// -------------------------------------------------------------------

// TransformationMatrix

// repeated .proto.FloatArray arrays = 1;
inline int TransformationMatrix::_internal_arrays_size() const {
  return arrays_.size();
}
inline int TransformationMatrix::arrays_size() const {
  return _internal_arrays_size();
}
inline void TransformationMatrix::clear_arrays() {
  arrays_.Clear();
}
inline ::proto::FloatArray* TransformationMatrix::mutable_arrays(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TransformationMatrix.arrays)
  return arrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FloatArray >*
TransformationMatrix::mutable_arrays() {
  // @@protoc_insertion_point(field_mutable_list:proto.TransformationMatrix.arrays)
  return &arrays_;
}
inline const ::proto::FloatArray& TransformationMatrix::_internal_arrays(int index) const {
  return arrays_.Get(index);
}
inline const ::proto::FloatArray& TransformationMatrix::arrays(int index) const {
  // @@protoc_insertion_point(field_get:proto.TransformationMatrix.arrays)
  return _internal_arrays(index);
}
inline ::proto::FloatArray* TransformationMatrix::_internal_add_arrays() {
  return arrays_.Add();
}
inline ::proto::FloatArray* TransformationMatrix::add_arrays() {
  ::proto::FloatArray* _add = _internal_add_arrays();
  // @@protoc_insertion_point(field_add:proto.TransformationMatrix.arrays)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::FloatArray >&
TransformationMatrix::arrays() const {
  // @@protoc_insertion_point(field_list:proto.TransformationMatrix.arrays)
  return arrays_;
}

// -------------------------------------------------------------------

// FloatArray

// repeated float values = 1;
inline int FloatArray::_internal_values_size() const {
  return values_.size();
}
inline int FloatArray::values_size() const {
  return _internal_values_size();
}
inline void FloatArray::clear_values() {
  values_.Clear();
}
inline float FloatArray::_internal_values(int index) const {
  return values_.Get(index);
}
inline float FloatArray::values(int index) const {
  // @@protoc_insertion_point(field_get:proto.FloatArray.values)
  return _internal_values(index);
}
inline void FloatArray::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FloatArray.values)
}
inline void FloatArray::_internal_add_values(float value) {
  values_.Add(value);
}
inline void FloatArray::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:proto.FloatArray.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::values() const {
  // @@protoc_insertion_point(field_list:proto.FloatArray.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.FloatArray.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Type>() {
  return ::proto::Type_descriptor();
}
template <> struct is_proto_enum< ::proto::Transformation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::Transformation>() {
  return ::proto::Transformation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImgFrame_2eproto
