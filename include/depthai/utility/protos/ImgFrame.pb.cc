// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImgFrame.proto

#include "ImgFrame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr ImgFrame::ImgFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ts_(nullptr)
  , tsdevice_(nullptr)
  , fb_(nullptr)
  , sourcefb_(nullptr)
  , cam_(nullptr)
  , transformations_(nullptr)
  , sequencenum_(int64_t{0})
  , hfovdegrees_(0)
  , instancenum_(0u){}
struct ImgFrameDefaultTypeInternal {
  constexpr ImgFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImgFrameDefaultTypeInternal() {}
  union {
    ImgFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImgFrameDefaultTypeInternal _ImgFrame_default_instance_;
constexpr Specs::Specs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , width_(0u)
  , height_(0u)
  , stride_(0u)
  , bytespp_(0u)
  , p1offset_(0u)
  , p2offset_(0u)
  , p3offset_(0u){}
struct SpecsDefaultTypeInternal {
  constexpr SpecsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecsDefaultTypeInternal() {}
  union {
    Specs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecsDefaultTypeInternal _Specs_default_instance_;
constexpr CameraSettings::CameraSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exposuretimeus_(0)
  , sensitivityiso_(0)
  , lensposition_(0)
  , wbcolortemp_(0)
  , lenspositionraw_(0){}
struct CameraSettingsDefaultTypeInternal {
  constexpr CameraSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraSettingsDefaultTypeInternal() {}
  union {
    CameraSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraSettingsDefaultTypeInternal _CameraSettings_default_instance_;
constexpr ImgTransformations::ImgTransformations(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformations_()
  , invalidflag_(false){}
struct ImgTransformationsDefaultTypeInternal {
  constexpr ImgTransformationsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImgTransformationsDefaultTypeInternal() {}
  union {
    ImgTransformations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImgTransformationsDefaultTypeInternal _ImgTransformations_default_instance_;
constexpr ImgTransformation::ImgTransformation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transformationmatrix_(nullptr)
  , invtransformationmatrix_(nullptr)
  , transformationtype_(0)

  , topleftcropx_(0)
  , topleftcropy_(0)
  , bottomrightcropx_(0)
  , bottomrightcropy_(0)
  , toppadding_(0)
  , bottompadding_(0)
  , leftpadding_(0)
  , rightpadding_(0)
  , aftertransformwidth_(0u)
  , aftertransformheight_(0u)
  , beforetransformwidth_(0u)
  , beforetransformheight_(0u){}
struct ImgTransformationDefaultTypeInternal {
  constexpr ImgTransformationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImgTransformationDefaultTypeInternal() {}
  union {
    ImgTransformation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImgTransformationDefaultTypeInternal _ImgTransformation_default_instance_;
constexpr TransformationMatrix::TransformationMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arrays_(){}
struct TransformationMatrixDefaultTypeInternal {
  constexpr TransformationMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformationMatrixDefaultTypeInternal() {}
  union {
    TransformationMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformationMatrixDefaultTypeInternal _TransformationMatrix_default_instance_;
constexpr FloatArray::FloatArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct FloatArrayDefaultTypeInternal {
  constexpr FloatArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FloatArrayDefaultTypeInternal() {}
  union {
    FloatArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ImgFrame_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ImgFrame_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ImgFrame_2eproto = nullptr;

const uint32_t TableStruct_ImgFrame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, ts_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, tsdevice_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, fb_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, sourcefb_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, cam_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, hfovdegrees_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, instancenum_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgFrame, transformations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Specs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Specs, type_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, width_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, height_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, stride_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, bytespp_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, p1offset_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, p2offset_),
  PROTOBUF_FIELD_OFFSET(::proto::Specs, p3offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, exposuretimeus_),
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, sensitivityiso_),
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, lensposition_),
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, wbcolortemp_),
  PROTOBUF_FIELD_OFFSET(::proto::CameraSettings, lenspositionraw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformations, transformations_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformations, invalidflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, transformationtype_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, topleftcropx_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, topleftcropy_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, bottomrightcropx_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, bottomrightcropy_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, toppadding_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, bottompadding_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, leftpadding_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, rightpadding_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, transformationmatrix_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, invtransformationmatrix_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, aftertransformwidth_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, aftertransformheight_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, beforetransformwidth_),
  PROTOBUF_FIELD_OFFSET(::proto::ImgTransformation, beforetransformheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::TransformationMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::TransformationMatrix, arrays_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FloatArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::FloatArray, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ImgFrame)},
  { 15, -1, -1, sizeof(::proto::Specs)},
  { 29, -1, -1, sizeof(::proto::CameraSettings)},
  { 40, -1, -1, sizeof(::proto::ImgTransformations)},
  { 48, -1, -1, sizeof(::proto::ImgTransformation)},
  { 69, -1, -1, sizeof(::proto::TransformationMatrix)},
  { 76, -1, -1, sizeof(::proto::FloatArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ImgFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Specs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_CameraSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ImgTransformations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_ImgTransformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_TransformationMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_FloatArray_default_instance_),
};

const char descriptor_table_protodef_ImgFrame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ImgFrame.proto\022\005proto\032\023ImgDetections.p"
  "roto\"\235\002\n\010ImgFrame\022\034\n\002ts\030\001 \001(\0132\020.proto.Ti"
  "mestamp\022\"\n\010tsDevice\030\002 \001(\0132\020.proto.Timest"
  "amp\022\023\n\013sequenceNum\030\003 \001(\003\022\030\n\002fb\030\004 \001(\0132\014.p"
  "roto.Specs\022\036\n\010sourceFb\030\005 \001(\0132\014.proto.Spe"
  "cs\022\"\n\003cam\030\006 \001(\0132\025.proto.CameraSettings\022\023"
  "\n\013HFovDegrees\030\007 \001(\002\022\023\n\013instanceNum\030\010 \001(\r"
  "\0222\n\017transformations\030\t \001(\0132\031.proto.ImgTra"
  "nsformations\"\230\001\n\005Specs\022\031\n\004type\030\001 \001(\0162\013.p"
  "roto.Type\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r"
  "\022\016\n\006stride\030\004 \001(\r\022\017\n\007bytesPP\030\005 \001(\r\022\020\n\010p1O"
  "ffset\030\006 \001(\r\022\020\n\010p2Offset\030\007 \001(\r\022\020\n\010p3Offse"
  "t\030\010 \001(\r\"\204\001\n\016CameraSettings\022\026\n\016exposureTi"
  "meUs\030\001 \001(\005\022\026\n\016sensitivityIso\030\002 \001(\005\022\024\n\014le"
  "nsPosition\030\003 \001(\005\022\023\n\013wbColorTemp\030\004 \001(\005\022\027\n"
  "\017lensPositionRaw\030\005 \001(\002\"\\\n\022ImgTransformat"
  "ions\0221\n\017transformations\030\001 \003(\0132\030.proto.Im"
  "gTransformation\022\023\n\013invalidFlag\030\002 \001(\010\"\355\003\n"
  "\021ImgTransformation\0221\n\022transformationType"
  "\030\001 \001(\0162\025.proto.Transformation\022\024\n\014topLeft"
  "CropX\030\002 \001(\005\022\024\n\014topLeftCropY\030\003 \001(\005\022\030\n\020bot"
  "tomRightCropX\030\004 \001(\005\022\030\n\020bottomRightCropY\030"
  "\005 \001(\005\022\022\n\ntopPadding\030\006 \001(\005\022\025\n\rbottomPaddi"
  "ng\030\007 \001(\005\022\023\n\013leftPadding\030\010 \001(\005\022\024\n\014rightPa"
  "dding\030\t \001(\005\0229\n\024transformationMatrix\030\n \001("
  "\0132\033.proto.TransformationMatrix\022<\n\027invTra"
  "nsformationMatrix\030\013 \001(\0132\033.proto.Transfor"
  "mationMatrix\022\033\n\023afterTransformWidth\030\014 \001("
  "\r\022\034\n\024afterTransformHeight\030\r \001(\r\022\034\n\024befor"
  "eTransformWidth\030\016 \001(\r\022\035\n\025beforeTransform"
  "Height\030\017 \001(\r\"9\n\024TransformationMatrix\022!\n\006"
  "arrays\030\001 \003(\0132\021.proto.FloatArray\"\034\n\nFloat"
  "Array\022\016\n\006values\030\001 \003(\002*\267\003\n\004Type\022\013\n\007YUV422"
  "i\020\000\022\013\n\007YUV444p\020\001\022\013\n\007YUV420p\020\002\022\013\n\007YUV422p"
  "\020\003\022\013\n\007YUV400p\020\004\022\014\n\010RGBA8888\020\005\022\r\n\tRGB1616"
  "16\020\006\022\013\n\007RGB888p\020\007\022\013\n\007BGR888p\020\010\022\013\n\007RGB888"
  "i\020\t\022\013\n\007BGR888i\020\n\022\010\n\004LUT2\020\013\022\010\n\004LUT4\020\014\022\t\n\005"
  "LUT16\020\r\022\t\n\005RAW16\020\016\022\t\n\005RAW14\020\017\022\t\n\005RAW12\020\020"
  "\022\t\n\005RAW10\020\021\022\010\n\004RAW8\020\022\022\n\n\006PACK10\020\023\022\n\n\006PAC"
  "K12\020\024\022\013\n\007YUV444i\020\025\022\010\n\004NV12\020\026\022\010\n\004NV21\020\027\022\r"
  "\n\tBITSTREAM\020\030\022\007\n\003HDR\020\031\022\021\n\rRGBF16F16F16p\020"
  "\032\022\021\n\rBGRF16F16F16p\020\033\022\021\n\rRGBF16F16F16i\020\034\022"
  "\021\n\rBGRF16F16F16i\020\035\022\t\n\005GRAY8\020\036\022\013\n\007GRAYF16"
  "\020\037\022\t\n\005RAW32\020 \022\010\n\004NONE\020!*P\n\016Transformatio"
  "n\022\010\n\004INIT\020\000\022\010\n\004CROP\020\001\022\014\n\010ROTATION\020\002\022\007\n\003P"
  "AD\020\003\022\010\n\004FLIP\020\004\022\t\n\005SCALE\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ImgFrame_2eproto_deps[1] = {
  &::descriptor_table_ImgDetections_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ImgFrame_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImgFrame_2eproto = {
  false, false, 1833, descriptor_table_protodef_ImgFrame_2eproto, "ImgFrame.proto", 
  &descriptor_table_ImgFrame_2eproto_once, descriptor_table_ImgFrame_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_ImgFrame_2eproto::offsets,
  file_level_metadata_ImgFrame_2eproto, file_level_enum_descriptors_ImgFrame_2eproto, file_level_service_descriptors_ImgFrame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ImgFrame_2eproto_getter() {
  return &descriptor_table_ImgFrame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ImgFrame_2eproto(&descriptor_table_ImgFrame_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ImgFrame_2eproto);
  return file_level_enum_descriptors_ImgFrame_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transformation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ImgFrame_2eproto);
  return file_level_enum_descriptors_ImgFrame_2eproto[1];
}
bool Transformation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ImgFrame::_Internal {
 public:
  static const ::proto::Timestamp& ts(const ImgFrame* msg);
  static const ::proto::Timestamp& tsdevice(const ImgFrame* msg);
  static const ::proto::Specs& fb(const ImgFrame* msg);
  static const ::proto::Specs& sourcefb(const ImgFrame* msg);
  static const ::proto::CameraSettings& cam(const ImgFrame* msg);
  static const ::proto::ImgTransformations& transformations(const ImgFrame* msg);
};

const ::proto::Timestamp&
ImgFrame::_Internal::ts(const ImgFrame* msg) {
  return *msg->ts_;
}
const ::proto::Timestamp&
ImgFrame::_Internal::tsdevice(const ImgFrame* msg) {
  return *msg->tsdevice_;
}
const ::proto::Specs&
ImgFrame::_Internal::fb(const ImgFrame* msg) {
  return *msg->fb_;
}
const ::proto::Specs&
ImgFrame::_Internal::sourcefb(const ImgFrame* msg) {
  return *msg->sourcefb_;
}
const ::proto::CameraSettings&
ImgFrame::_Internal::cam(const ImgFrame* msg) {
  return *msg->cam_;
}
const ::proto::ImgTransformations&
ImgFrame::_Internal::transformations(const ImgFrame* msg) {
  return *msg->transformations_;
}
void ImgFrame::clear_ts() {
  if (GetArenaForAllocation() == nullptr && ts_ != nullptr) {
    delete ts_;
  }
  ts_ = nullptr;
}
void ImgFrame::clear_tsdevice() {
  if (GetArenaForAllocation() == nullptr && tsdevice_ != nullptr) {
    delete tsdevice_;
  }
  tsdevice_ = nullptr;
}
ImgFrame::ImgFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.ImgFrame)
}
ImgFrame::ImgFrame(const ImgFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ts()) {
    ts_ = new ::proto::Timestamp(*from.ts_);
  } else {
    ts_ = nullptr;
  }
  if (from._internal_has_tsdevice()) {
    tsdevice_ = new ::proto::Timestamp(*from.tsdevice_);
  } else {
    tsdevice_ = nullptr;
  }
  if (from._internal_has_fb()) {
    fb_ = new ::proto::Specs(*from.fb_);
  } else {
    fb_ = nullptr;
  }
  if (from._internal_has_sourcefb()) {
    sourcefb_ = new ::proto::Specs(*from.sourcefb_);
  } else {
    sourcefb_ = nullptr;
  }
  if (from._internal_has_cam()) {
    cam_ = new ::proto::CameraSettings(*from.cam_);
  } else {
    cam_ = nullptr;
  }
  if (from._internal_has_transformations()) {
    transformations_ = new ::proto::ImgTransformations(*from.transformations_);
  } else {
    transformations_ = nullptr;
  }
  ::memcpy(&sequencenum_, &from.sequencenum_,
    static_cast<size_t>(reinterpret_cast<char*>(&instancenum_) -
    reinterpret_cast<char*>(&sequencenum_)) + sizeof(instancenum_));
  // @@protoc_insertion_point(copy_constructor:proto.ImgFrame)
}

inline void ImgFrame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&instancenum_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(instancenum_));
}

ImgFrame::~ImgFrame() {
  // @@protoc_insertion_point(destructor:proto.ImgFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImgFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ts_;
  if (this != internal_default_instance()) delete tsdevice_;
  if (this != internal_default_instance()) delete fb_;
  if (this != internal_default_instance()) delete sourcefb_;
  if (this != internal_default_instance()) delete cam_;
  if (this != internal_default_instance()) delete transformations_;
}

void ImgFrame::ArenaDtor(void* object) {
  ImgFrame* _this = reinterpret_cast< ImgFrame* >(object);
  (void)_this;
}
void ImgFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImgFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImgFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ImgFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ts_ != nullptr) {
    delete ts_;
  }
  ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tsdevice_ != nullptr) {
    delete tsdevice_;
  }
  tsdevice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fb_ != nullptr) {
    delete fb_;
  }
  fb_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sourcefb_ != nullptr) {
    delete sourcefb_;
  }
  sourcefb_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cam_ != nullptr) {
    delete cam_;
  }
  cam_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transformations_ != nullptr) {
    delete transformations_;
  }
  transformations_ = nullptr;
  ::memset(&sequencenum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instancenum_) -
      reinterpret_cast<char*>(&sequencenum_)) + sizeof(instancenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImgFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Timestamp ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp tsDevice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsdevice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequenceNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Specs fb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Specs sourceFb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourcefb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CameraSettings cam = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float HFovDegrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          hfovdegrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 instanceNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          instancenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ImgTransformations transformations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformations(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImgFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ImgFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Timestamp ts = 1;
  if (this->_internal_has_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ts(this), target, stream);
  }

  // .proto.Timestamp tsDevice = 2;
  if (this->_internal_has_tsdevice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tsdevice(this), target, stream);
  }

  // int64 sequenceNum = 3;
  if (this->_internal_sequencenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sequencenum(), target);
  }

  // .proto.Specs fb = 4;
  if (this->_internal_has_fb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fb(this), target, stream);
  }

  // .proto.Specs sourceFb = 5;
  if (this->_internal_has_sourcefb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sourcefb(this), target, stream);
  }

  // .proto.CameraSettings cam = 6;
  if (this->_internal_has_cam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cam(this), target, stream);
  }

  // float HFovDegrees = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hfovdegrees = this->_internal_hfovdegrees();
  uint32_t raw_hfovdegrees;
  memcpy(&raw_hfovdegrees, &tmp_hfovdegrees, sizeof(tmp_hfovdegrees));
  if (raw_hfovdegrees != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_hfovdegrees(), target);
  }

  // uint32 instanceNum = 8;
  if (this->_internal_instancenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_instancenum(), target);
  }

  // .proto.ImgTransformations transformations = 9;
  if (this->_internal_has_transformations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::transformations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ImgFrame)
  return target;
}

size_t ImgFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ImgFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Timestamp ts = 1;
  if (this->_internal_has_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ts_);
  }

  // .proto.Timestamp tsDevice = 2;
  if (this->_internal_has_tsdevice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tsdevice_);
  }

  // .proto.Specs fb = 4;
  if (this->_internal_has_fb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fb_);
  }

  // .proto.Specs sourceFb = 5;
  if (this->_internal_has_sourcefb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourcefb_);
  }

  // .proto.CameraSettings cam = 6;
  if (this->_internal_has_cam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cam_);
  }

  // .proto.ImgTransformations transformations = 9;
  if (this->_internal_has_transformations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformations_);
  }

  // int64 sequenceNum = 3;
  if (this->_internal_sequencenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sequencenum());
  }

  // float HFovDegrees = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hfovdegrees = this->_internal_hfovdegrees();
  uint32_t raw_hfovdegrees;
  memcpy(&raw_hfovdegrees, &tmp_hfovdegrees, sizeof(tmp_hfovdegrees));
  if (raw_hfovdegrees != 0) {
    total_size += 1 + 4;
  }

  // uint32 instanceNum = 8;
  if (this->_internal_instancenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_instancenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImgFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImgFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImgFrame::GetClassData() const { return &_class_data_; }

void ImgFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImgFrame *>(to)->MergeFrom(
      static_cast<const ImgFrame &>(from));
}


void ImgFrame::MergeFrom(const ImgFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ImgFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ts()) {
    _internal_mutable_ts()->::proto::Timestamp::MergeFrom(from._internal_ts());
  }
  if (from._internal_has_tsdevice()) {
    _internal_mutable_tsdevice()->::proto::Timestamp::MergeFrom(from._internal_tsdevice());
  }
  if (from._internal_has_fb()) {
    _internal_mutable_fb()->::proto::Specs::MergeFrom(from._internal_fb());
  }
  if (from._internal_has_sourcefb()) {
    _internal_mutable_sourcefb()->::proto::Specs::MergeFrom(from._internal_sourcefb());
  }
  if (from._internal_has_cam()) {
    _internal_mutable_cam()->::proto::CameraSettings::MergeFrom(from._internal_cam());
  }
  if (from._internal_has_transformations()) {
    _internal_mutable_transformations()->::proto::ImgTransformations::MergeFrom(from._internal_transformations());
  }
  if (from._internal_sequencenum() != 0) {
    _internal_set_sequencenum(from._internal_sequencenum());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hfovdegrees = from._internal_hfovdegrees();
  uint32_t raw_hfovdegrees;
  memcpy(&raw_hfovdegrees, &tmp_hfovdegrees, sizeof(tmp_hfovdegrees));
  if (raw_hfovdegrees != 0) {
    _internal_set_hfovdegrees(from._internal_hfovdegrees());
  }
  if (from._internal_instancenum() != 0) {
    _internal_set_instancenum(from._internal_instancenum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImgFrame::CopyFrom(const ImgFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ImgFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgFrame::IsInitialized() const {
  return true;
}

void ImgFrame::InternalSwap(ImgFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImgFrame, instancenum_)
      + sizeof(ImgFrame::instancenum_)
      - PROTOBUF_FIELD_OFFSET(ImgFrame, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImgFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[0]);
}

// ===================================================================

class Specs::_Internal {
 public:
};

Specs::Specs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Specs)
}
Specs::Specs(const Specs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&p3offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(p3offset_));
  // @@protoc_insertion_point(copy_constructor:proto.Specs)
}

inline void Specs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p3offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(p3offset_));
}

Specs::~Specs() {
  // @@protoc_insertion_point(destructor:proto.Specs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Specs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Specs::ArenaDtor(void* object) {
  Specs* _this = reinterpret_cast< Specs* >(object);
  (void)_this;
}
void Specs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Specs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Specs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Specs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p3offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(p3offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Specs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto::Type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bytesPP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bytespp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 p1Offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          p1offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 p2Offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          p2offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 p3Offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          p3offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Specs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Specs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // uint32 stride = 4;
  if (this->_internal_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stride(), target);
  }

  // uint32 bytesPP = 5;
  if (this->_internal_bytespp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bytespp(), target);
  }

  // uint32 p1Offset = 6;
  if (this->_internal_p1offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_p1offset(), target);
  }

  // uint32 p2Offset = 7;
  if (this->_internal_p2offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_p2offset(), target);
  }

  // uint32 p3Offset = 8;
  if (this->_internal_p3offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_p3offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Specs)
  return target;
}

size_t Specs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Specs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 stride = 4;
  if (this->_internal_stride() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stride());
  }

  // uint32 bytesPP = 5;
  if (this->_internal_bytespp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bytespp());
  }

  // uint32 p1Offset = 6;
  if (this->_internal_p1offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_p1offset());
  }

  // uint32 p2Offset = 7;
  if (this->_internal_p2offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_p2offset());
  }

  // uint32 p3Offset = 8;
  if (this->_internal_p3offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_p3offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Specs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Specs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Specs::GetClassData() const { return &_class_data_; }

void Specs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Specs *>(to)->MergeFrom(
      static_cast<const Specs &>(from));
}


void Specs::MergeFrom(const Specs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Specs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
  if (from._internal_bytespp() != 0) {
    _internal_set_bytespp(from._internal_bytespp());
  }
  if (from._internal_p1offset() != 0) {
    _internal_set_p1offset(from._internal_p1offset());
  }
  if (from._internal_p2offset() != 0) {
    _internal_set_p2offset(from._internal_p2offset());
  }
  if (from._internal_p3offset() != 0) {
    _internal_set_p3offset(from._internal_p3offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Specs::CopyFrom(const Specs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Specs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Specs::IsInitialized() const {
  return true;
}

void Specs::InternalSwap(Specs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Specs, p3offset_)
      + sizeof(Specs::p3offset_)
      - PROTOBUF_FIELD_OFFSET(Specs, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Specs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[1]);
}

// ===================================================================

class CameraSettings::_Internal {
 public:
};

CameraSettings::CameraSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.CameraSettings)
}
CameraSettings::CameraSettings(const CameraSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&exposuretimeus_, &from.exposuretimeus_,
    static_cast<size_t>(reinterpret_cast<char*>(&lenspositionraw_) -
    reinterpret_cast<char*>(&exposuretimeus_)) + sizeof(lenspositionraw_));
  // @@protoc_insertion_point(copy_constructor:proto.CameraSettings)
}

inline void CameraSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exposuretimeus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lenspositionraw_) -
    reinterpret_cast<char*>(&exposuretimeus_)) + sizeof(lenspositionraw_));
}

CameraSettings::~CameraSettings() {
  // @@protoc_insertion_point(destructor:proto.CameraSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraSettings::ArenaDtor(void* object) {
  CameraSettings* _this = reinterpret_cast< CameraSettings* >(object);
  (void)_this;
}
void CameraSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CameraSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&exposuretimeus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lenspositionraw_) -
      reinterpret_cast<char*>(&exposuretimeus_)) + sizeof(lenspositionraw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 exposureTimeUs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          exposuretimeus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sensitivityIso = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sensitivityiso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lensPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lensposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wbColorTemp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          wbcolortemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float lensPositionRaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          lenspositionraw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.CameraSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exposureTimeUs = 1;
  if (this->_internal_exposuretimeus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_exposuretimeus(), target);
  }

  // int32 sensitivityIso = 2;
  if (this->_internal_sensitivityiso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sensitivityiso(), target);
  }

  // int32 lensPosition = 3;
  if (this->_internal_lensposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lensposition(), target);
  }

  // int32 wbColorTemp = 4;
  if (this->_internal_wbcolortemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wbcolortemp(), target);
  }

  // float lensPositionRaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenspositionraw = this->_internal_lenspositionraw();
  uint32_t raw_lenspositionraw;
  memcpy(&raw_lenspositionraw, &tmp_lenspositionraw, sizeof(tmp_lenspositionraw));
  if (raw_lenspositionraw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_lenspositionraw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CameraSettings)
  return target;
}

size_t CameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CameraSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exposureTimeUs = 1;
  if (this->_internal_exposuretimeus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_exposuretimeus());
  }

  // int32 sensitivityIso = 2;
  if (this->_internal_sensitivityiso() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sensitivityiso());
  }

  // int32 lensPosition = 3;
  if (this->_internal_lensposition() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lensposition());
  }

  // int32 wbColorTemp = 4;
  if (this->_internal_wbcolortemp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wbcolortemp());
  }

  // float lensPositionRaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenspositionraw = this->_internal_lenspositionraw();
  uint32_t raw_lenspositionraw;
  memcpy(&raw_lenspositionraw, &tmp_lenspositionraw, sizeof(tmp_lenspositionraw));
  if (raw_lenspositionraw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraSettings::GetClassData() const { return &_class_data_; }

void CameraSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraSettings *>(to)->MergeFrom(
      static_cast<const CameraSettings &>(from));
}


void CameraSettings::MergeFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exposuretimeus() != 0) {
    _internal_set_exposuretimeus(from._internal_exposuretimeus());
  }
  if (from._internal_sensitivityiso() != 0) {
    _internal_set_sensitivityiso(from._internal_sensitivityiso());
  }
  if (from._internal_lensposition() != 0) {
    _internal_set_lensposition(from._internal_lensposition());
  }
  if (from._internal_wbcolortemp() != 0) {
    _internal_set_wbcolortemp(from._internal_wbcolortemp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lenspositionraw = from._internal_lenspositionraw();
  uint32_t raw_lenspositionraw;
  memcpy(&raw_lenspositionraw, &tmp_lenspositionraw, sizeof(tmp_lenspositionraw));
  if (raw_lenspositionraw != 0) {
    _internal_set_lenspositionraw(from._internal_lenspositionraw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  return true;
}

void CameraSettings::InternalSwap(CameraSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraSettings, lenspositionraw_)
      + sizeof(CameraSettings::lenspositionraw_)
      - PROTOBUF_FIELD_OFFSET(CameraSettings, exposuretimeus_)>(
          reinterpret_cast<char*>(&exposuretimeus_),
          reinterpret_cast<char*>(&other->exposuretimeus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[2]);
}

// ===================================================================

class ImgTransformations::_Internal {
 public:
};

ImgTransformations::ImgTransformations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transformations_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.ImgTransformations)
}
ImgTransformations::ImgTransformations(const ImgTransformations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transformations_(from.transformations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalidflag_ = from.invalidflag_;
  // @@protoc_insertion_point(copy_constructor:proto.ImgTransformations)
}

inline void ImgTransformations::SharedCtor() {
invalidflag_ = false;
}

ImgTransformations::~ImgTransformations() {
  // @@protoc_insertion_point(destructor:proto.ImgTransformations)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImgTransformations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImgTransformations::ArenaDtor(void* object) {
  ImgTransformations* _this = reinterpret_cast< ImgTransformations* >(object);
  (void)_this;
}
void ImgTransformations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImgTransformations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImgTransformations::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ImgTransformations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformations_.Clear();
  invalidflag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImgTransformations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.ImgTransformation transformations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool invalidFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          invalidflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImgTransformations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ImgTransformations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ImgTransformation transformations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transformations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transformations(i), target, stream);
  }

  // bool invalidFlag = 2;
  if (this->_internal_invalidflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_invalidflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ImgTransformations)
  return target;
}

size_t ImgTransformations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ImgTransformations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.ImgTransformation transformations = 1;
  total_size += 1UL * this->_internal_transformations_size();
  for (const auto& msg : this->transformations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool invalidFlag = 2;
  if (this->_internal_invalidflag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImgTransformations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImgTransformations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImgTransformations::GetClassData() const { return &_class_data_; }

void ImgTransformations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImgTransformations *>(to)->MergeFrom(
      static_cast<const ImgTransformations &>(from));
}


void ImgTransformations::MergeFrom(const ImgTransformations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ImgTransformations)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transformations_.MergeFrom(from.transformations_);
  if (from._internal_invalidflag() != 0) {
    _internal_set_invalidflag(from._internal_invalidflag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImgTransformations::CopyFrom(const ImgTransformations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ImgTransformations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgTransformations::IsInitialized() const {
  return true;
}

void ImgTransformations::InternalSwap(ImgTransformations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transformations_.InternalSwap(&other->transformations_);
  swap(invalidflag_, other->invalidflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImgTransformations::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[3]);
}

// ===================================================================

class ImgTransformation::_Internal {
 public:
  static const ::proto::TransformationMatrix& transformationmatrix(const ImgTransformation* msg);
  static const ::proto::TransformationMatrix& invtransformationmatrix(const ImgTransformation* msg);
};

const ::proto::TransformationMatrix&
ImgTransformation::_Internal::transformationmatrix(const ImgTransformation* msg) {
  return *msg->transformationmatrix_;
}
const ::proto::TransformationMatrix&
ImgTransformation::_Internal::invtransformationmatrix(const ImgTransformation* msg) {
  return *msg->invtransformationmatrix_;
}
ImgTransformation::ImgTransformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.ImgTransformation)
}
ImgTransformation::ImgTransformation(const ImgTransformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transformationmatrix()) {
    transformationmatrix_ = new ::proto::TransformationMatrix(*from.transformationmatrix_);
  } else {
    transformationmatrix_ = nullptr;
  }
  if (from._internal_has_invtransformationmatrix()) {
    invtransformationmatrix_ = new ::proto::TransformationMatrix(*from.invtransformationmatrix_);
  } else {
    invtransformationmatrix_ = nullptr;
  }
  ::memcpy(&transformationtype_, &from.transformationtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&beforetransformheight_) -
    reinterpret_cast<char*>(&transformationtype_)) + sizeof(beforetransformheight_));
  // @@protoc_insertion_point(copy_constructor:proto.ImgTransformation)
}

inline void ImgTransformation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transformationmatrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beforetransformheight_) -
    reinterpret_cast<char*>(&transformationmatrix_)) + sizeof(beforetransformheight_));
}

ImgTransformation::~ImgTransformation() {
  // @@protoc_insertion_point(destructor:proto.ImgTransformation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImgTransformation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transformationmatrix_;
  if (this != internal_default_instance()) delete invtransformationmatrix_;
}

void ImgTransformation::ArenaDtor(void* object) {
  ImgTransformation* _this = reinterpret_cast< ImgTransformation* >(object);
  (void)_this;
}
void ImgTransformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImgTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImgTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ImgTransformation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transformationmatrix_ != nullptr) {
    delete transformationmatrix_;
  }
  transformationmatrix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && invtransformationmatrix_ != nullptr) {
    delete invtransformationmatrix_;
  }
  invtransformationmatrix_ = nullptr;
  ::memset(&transformationtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&beforetransformheight_) -
      reinterpret_cast<char*>(&transformationtype_)) + sizeof(beforetransformheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImgTransformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Transformation transformationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_transformationtype(static_cast<::proto::Transformation>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 topLeftCropX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          topleftcropx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topLeftCropY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          topleftcropy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bottomRightCropX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bottomrightcropx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bottomRightCropY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          bottomrightcropy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topPadding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          toppadding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bottomPadding = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bottompadding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 leftPadding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          leftpadding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rightPadding = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          rightpadding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransformationMatrix transformationMatrix = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transformationmatrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TransformationMatrix invTransformationMatrix = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_invtransformationmatrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 afterTransformWidth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          aftertransformwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 afterTransformHeight = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          aftertransformheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 beforeTransformWidth = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          beforetransformwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 beforeTransformHeight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          beforetransformheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImgTransformation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ImgTransformation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Transformation transformationType = 1;
  if (this->_internal_transformationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_transformationtype(), target);
  }

  // int32 topLeftCropX = 2;
  if (this->_internal_topleftcropx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_topleftcropx(), target);
  }

  // int32 topLeftCropY = 3;
  if (this->_internal_topleftcropy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_topleftcropy(), target);
  }

  // int32 bottomRightCropX = 4;
  if (this->_internal_bottomrightcropx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bottomrightcropx(), target);
  }

  // int32 bottomRightCropY = 5;
  if (this->_internal_bottomrightcropy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bottomrightcropy(), target);
  }

  // int32 topPadding = 6;
  if (this->_internal_toppadding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_toppadding(), target);
  }

  // int32 bottomPadding = 7;
  if (this->_internal_bottompadding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bottompadding(), target);
  }

  // int32 leftPadding = 8;
  if (this->_internal_leftpadding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_leftpadding(), target);
  }

  // int32 rightPadding = 9;
  if (this->_internal_rightpadding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_rightpadding(), target);
  }

  // .proto.TransformationMatrix transformationMatrix = 10;
  if (this->_internal_has_transformationmatrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transformationmatrix(this), target, stream);
  }

  // .proto.TransformationMatrix invTransformationMatrix = 11;
  if (this->_internal_has_invtransformationmatrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::invtransformationmatrix(this), target, stream);
  }

  // uint32 afterTransformWidth = 12;
  if (this->_internal_aftertransformwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_aftertransformwidth(), target);
  }

  // uint32 afterTransformHeight = 13;
  if (this->_internal_aftertransformheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_aftertransformheight(), target);
  }

  // uint32 beforeTransformWidth = 14;
  if (this->_internal_beforetransformwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_beforetransformwidth(), target);
  }

  // uint32 beforeTransformHeight = 15;
  if (this->_internal_beforetransformheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_beforetransformheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ImgTransformation)
  return target;
}

size_t ImgTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ImgTransformation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.TransformationMatrix transformationMatrix = 10;
  if (this->_internal_has_transformationmatrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transformationmatrix_);
  }

  // .proto.TransformationMatrix invTransformationMatrix = 11;
  if (this->_internal_has_invtransformationmatrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invtransformationmatrix_);
  }

  // .proto.Transformation transformationType = 1;
  if (this->_internal_transformationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transformationtype());
  }

  // int32 topLeftCropX = 2;
  if (this->_internal_topleftcropx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_topleftcropx());
  }

  // int32 topLeftCropY = 3;
  if (this->_internal_topleftcropy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_topleftcropy());
  }

  // int32 bottomRightCropX = 4;
  if (this->_internal_bottomrightcropx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bottomrightcropx());
  }

  // int32 bottomRightCropY = 5;
  if (this->_internal_bottomrightcropy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bottomrightcropy());
  }

  // int32 topPadding = 6;
  if (this->_internal_toppadding() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_toppadding());
  }

  // int32 bottomPadding = 7;
  if (this->_internal_bottompadding() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bottompadding());
  }

  // int32 leftPadding = 8;
  if (this->_internal_leftpadding() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_leftpadding());
  }

  // int32 rightPadding = 9;
  if (this->_internal_rightpadding() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rightpadding());
  }

  // uint32 afterTransformWidth = 12;
  if (this->_internal_aftertransformwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_aftertransformwidth());
  }

  // uint32 afterTransformHeight = 13;
  if (this->_internal_aftertransformheight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_aftertransformheight());
  }

  // uint32 beforeTransformWidth = 14;
  if (this->_internal_beforetransformwidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_beforetransformwidth());
  }

  // uint32 beforeTransformHeight = 15;
  if (this->_internal_beforetransformheight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_beforetransformheight());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImgTransformation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImgTransformation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImgTransformation::GetClassData() const { return &_class_data_; }

void ImgTransformation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImgTransformation *>(to)->MergeFrom(
      static_cast<const ImgTransformation &>(from));
}


void ImgTransformation::MergeFrom(const ImgTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ImgTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transformationmatrix()) {
    _internal_mutable_transformationmatrix()->::proto::TransformationMatrix::MergeFrom(from._internal_transformationmatrix());
  }
  if (from._internal_has_invtransformationmatrix()) {
    _internal_mutable_invtransformationmatrix()->::proto::TransformationMatrix::MergeFrom(from._internal_invtransformationmatrix());
  }
  if (from._internal_transformationtype() != 0) {
    _internal_set_transformationtype(from._internal_transformationtype());
  }
  if (from._internal_topleftcropx() != 0) {
    _internal_set_topleftcropx(from._internal_topleftcropx());
  }
  if (from._internal_topleftcropy() != 0) {
    _internal_set_topleftcropy(from._internal_topleftcropy());
  }
  if (from._internal_bottomrightcropx() != 0) {
    _internal_set_bottomrightcropx(from._internal_bottomrightcropx());
  }
  if (from._internal_bottomrightcropy() != 0) {
    _internal_set_bottomrightcropy(from._internal_bottomrightcropy());
  }
  if (from._internal_toppadding() != 0) {
    _internal_set_toppadding(from._internal_toppadding());
  }
  if (from._internal_bottompadding() != 0) {
    _internal_set_bottompadding(from._internal_bottompadding());
  }
  if (from._internal_leftpadding() != 0) {
    _internal_set_leftpadding(from._internal_leftpadding());
  }
  if (from._internal_rightpadding() != 0) {
    _internal_set_rightpadding(from._internal_rightpadding());
  }
  if (from._internal_aftertransformwidth() != 0) {
    _internal_set_aftertransformwidth(from._internal_aftertransformwidth());
  }
  if (from._internal_aftertransformheight() != 0) {
    _internal_set_aftertransformheight(from._internal_aftertransformheight());
  }
  if (from._internal_beforetransformwidth() != 0) {
    _internal_set_beforetransformwidth(from._internal_beforetransformwidth());
  }
  if (from._internal_beforetransformheight() != 0) {
    _internal_set_beforetransformheight(from._internal_beforetransformheight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImgTransformation::CopyFrom(const ImgTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ImgTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgTransformation::IsInitialized() const {
  return true;
}

void ImgTransformation::InternalSwap(ImgTransformation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImgTransformation, beforetransformheight_)
      + sizeof(ImgTransformation::beforetransformheight_)
      - PROTOBUF_FIELD_OFFSET(ImgTransformation, transformationmatrix_)>(
          reinterpret_cast<char*>(&transformationmatrix_),
          reinterpret_cast<char*>(&other->transformationmatrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImgTransformation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[4]);
}

// ===================================================================

class TransformationMatrix::_Internal {
 public:
};

TransformationMatrix::TransformationMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arrays_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.TransformationMatrix)
}
TransformationMatrix::TransformationMatrix(const TransformationMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arrays_(from.arrays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TransformationMatrix)
}

inline void TransformationMatrix::SharedCtor() {
}

TransformationMatrix::~TransformationMatrix() {
  // @@protoc_insertion_point(destructor:proto.TransformationMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransformationMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransformationMatrix::ArenaDtor(void* object) {
  TransformationMatrix* _this = reinterpret_cast< TransformationMatrix* >(object);
  (void)_this;
}
void TransformationMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransformationMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformationMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TransformationMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrays_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformationMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.FloatArray arrays = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformationMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.TransformationMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.FloatArray arrays = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arrays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arrays(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TransformationMatrix)
  return target;
}

size_t TransformationMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TransformationMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.FloatArray arrays = 1;
  total_size += 1UL * this->_internal_arrays_size();
  for (const auto& msg : this->arrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformationMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformationMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformationMatrix::GetClassData() const { return &_class_data_; }

void TransformationMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformationMatrix *>(to)->MergeFrom(
      static_cast<const TransformationMatrix &>(from));
}


void TransformationMatrix::MergeFrom(const TransformationMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TransformationMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  arrays_.MergeFrom(from.arrays_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformationMatrix::CopyFrom(const TransformationMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TransformationMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformationMatrix::IsInitialized() const {
  return true;
}

void TransformationMatrix::InternalSwap(TransformationMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arrays_.InternalSwap(&other->arrays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformationMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[5]);
}

// ===================================================================

class FloatArray::_Internal {
 public:
};

FloatArray::FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.FloatArray)
}
FloatArray::FloatArray(const FloatArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.FloatArray)
}

inline void FloatArray::SharedCtor() {
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:proto.FloatArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FloatArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatArray::ArenaDtor(void* object) {
  FloatArray* _this = reinterpret_cast< FloatArray* >(object);
  (void)_this;
}
void FloatArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FloatArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FloatArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FloatArray)
  return target;
}

size_t FloatArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FloatArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FloatArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatArray::GetClassData() const { return &_class_data_; }

void FloatArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FloatArray *>(to)->MergeFrom(
      static_cast<const FloatArray &>(from));
}


void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {
  return true;
}

void FloatArray::InternalSwap(FloatArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ImgFrame_2eproto_getter, &descriptor_table_ImgFrame_2eproto_once,
      file_level_metadata_ImgFrame_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ImgFrame* Arena::CreateMaybeMessage< ::proto::ImgFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ImgFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Specs* Arena::CreateMaybeMessage< ::proto::Specs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Specs >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::CameraSettings* Arena::CreateMaybeMessage< ::proto::CameraSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::CameraSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ImgTransformations* Arena::CreateMaybeMessage< ::proto::ImgTransformations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ImgTransformations >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ImgTransformation* Arena::CreateMaybeMessage< ::proto::ImgTransformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ImgTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::TransformationMatrix* Arena::CreateMaybeMessage< ::proto::TransformationMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::TransformationMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FloatArray* Arena::CreateMaybeMessage< ::proto::FloatArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FloatArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
