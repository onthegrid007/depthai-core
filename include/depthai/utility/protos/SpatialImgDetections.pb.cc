// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpatialImgDetections.proto

#include "SpatialImgDetections.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
constexpr SpatialImgDetections::SpatialImgDetections(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detections_()
  , ts_(nullptr)
  , tsdevice_(nullptr)
  , sequencenum_(int64_t{0}){}
struct SpatialImgDetectionsDefaultTypeInternal {
  constexpr SpatialImgDetectionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpatialImgDetectionsDefaultTypeInternal() {}
  union {
    SpatialImgDetections _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpatialImgDetectionsDefaultTypeInternal _SpatialImgDetections_default_instance_;
constexpr SpatialImgDetection::SpatialImgDetection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detection_(nullptr)
  , spatialcoordinates_(nullptr)
  , boundingboxmapping_(nullptr){}
struct SpatialImgDetectionDefaultTypeInternal {
  constexpr SpatialImgDetectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpatialImgDetectionDefaultTypeInternal() {}
  union {
    SpatialImgDetection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpatialImgDetectionDefaultTypeInternal _SpatialImgDetection_default_instance_;
constexpr Point3f::Point3f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Point3fDefaultTypeInternal {
  constexpr Point3fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point3fDefaultTypeInternal() {}
  union {
    Point3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point3fDefaultTypeInternal _Point3f_default_instance_;
constexpr SpatialLocationCalculatorConfigData::SpatialLocationCalculatorConfigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roi_(nullptr)
  , calculationalgorithm_(nullptr)
  , auto__(0)
  , stepsize_(0){}
struct SpatialLocationCalculatorConfigDataDefaultTypeInternal {
  constexpr SpatialLocationCalculatorConfigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpatialLocationCalculatorConfigDataDefaultTypeInternal() {}
  union {
    SpatialLocationCalculatorConfigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpatialLocationCalculatorConfigDataDefaultTypeInternal _SpatialLocationCalculatorConfigData_default_instance_;
constexpr Rect::Rect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , width_(0)
  , height_(0){}
struct RectDefaultTypeInternal {
  constexpr RectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RectDefaultTypeInternal() {}
  union {
    Rect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RectDefaultTypeInternal _Rect_default_instance_;
constexpr SpatialLocationCalculatorAlgorithm::SpatialLocationCalculatorAlgorithm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lowerthreshold_(0u)
  , upperthreshold_(0u){}
struct SpatialLocationCalculatorAlgorithmDefaultTypeInternal {
  constexpr SpatialLocationCalculatorAlgorithmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpatialLocationCalculatorAlgorithmDefaultTypeInternal() {}
  union {
    SpatialLocationCalculatorAlgorithm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpatialLocationCalculatorAlgorithmDefaultTypeInternal _SpatialLocationCalculatorAlgorithm_default_instance_;
}  // namespace proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SpatialImgDetections_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SpatialImgDetections_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SpatialImgDetections_2eproto = nullptr;

const uint32_t TableStruct_SpatialImgDetections_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetections, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetections, ts_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetections, tsdevice_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetections, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetection, detection_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetection, spatialcoordinates_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialImgDetection, boundingboxmapping_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Point3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Point3f, x_),
  PROTOBUF_FIELD_OFFSET(::proto::Point3f, y_),
  PROTOBUF_FIELD_OFFSET(::proto::Point3f, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorConfigData, auto__),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorConfigData, roi_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorConfigData, calculationalgorithm_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorConfigData, stepsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Rect, x_),
  PROTOBUF_FIELD_OFFSET(::proto::Rect, y_),
  PROTOBUF_FIELD_OFFSET(::proto::Rect, width_),
  PROTOBUF_FIELD_OFFSET(::proto::Rect, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorAlgorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorAlgorithm, lowerthreshold_),
  PROTOBUF_FIELD_OFFSET(::proto::SpatialLocationCalculatorAlgorithm, upperthreshold_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::SpatialImgDetections)},
  { 10, -1, -1, sizeof(::proto::SpatialImgDetection)},
  { 19, -1, -1, sizeof(::proto::Point3f)},
  { 28, -1, -1, sizeof(::proto::SpatialLocationCalculatorConfigData)},
  { 38, -1, -1, sizeof(::proto::Rect)},
  { 48, -1, -1, sizeof(::proto::SpatialLocationCalculatorAlgorithm)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SpatialImgDetections_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SpatialImgDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Point3f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SpatialLocationCalculatorConfigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_SpatialLocationCalculatorAlgorithm_default_instance_),
};

const char descriptor_table_protodef_SpatialImgDetections_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032SpatialImgDetections.proto\022\005proto\032\023Img"
  "Detections.proto\"\235\001\n\024SpatialImgDetection"
  "s\022\023\n\013sequenceNum\030\001 \001(\003\022\034\n\002ts\030\002 \001(\0132\020.pro"
  "to.Timestamp\022\"\n\010tsDevice\030\003 \001(\0132\020.proto.T"
  "imestamp\022.\n\ndetections\030\004 \003(\0132\032.proto.Spa"
  "tialImgDetection\"\261\001\n\023SpatialImgDetection"
  "\022&\n\tdetection\030\001 \001(\0132\023.proto.ImgDetection"
  "\022*\n\022spatialCoordinates\030\002 \001(\0132\016.proto.Poi"
  "nt3f\022F\n\022boundingBoxMapping\030\003 \001(\0132*.proto"
  ".SpatialLocationCalculatorConfigData\"*\n\007"
  "Point3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"\250\001\n#SpatialLocationCalculatorConfigData"
  "\022\014\n\004AUTO\030\001 \001(\005\022\030\n\003roi\030\002 \001(\0132\013.proto.Rect"
  "\022G\n\024calculationAlgorithm\030\003 \001(\0132).proto.S"
  "patialLocationCalculatorAlgorithm\022\020\n\010ste"
  "pSize\030\004 \001(\005\";\n\004Rect\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
  "\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\"T\n\"Spat"
  "ialLocationCalculatorAlgorithm\022\026\n\016lowerT"
  "hreshold\030\001 \001(\r\022\026\n\016upperThreshold\030\002 \001(\rb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SpatialImgDetections_2eproto_deps[1] = {
  &::descriptor_table_ImgDetections_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SpatialImgDetections_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SpatialImgDetections_2eproto = {
  false, false, 766, descriptor_table_protodef_SpatialImgDetections_2eproto, "SpatialImgDetections.proto", 
  &descriptor_table_SpatialImgDetections_2eproto_once, descriptor_table_SpatialImgDetections_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_SpatialImgDetections_2eproto::offsets,
  file_level_metadata_SpatialImgDetections_2eproto, file_level_enum_descriptors_SpatialImgDetections_2eproto, file_level_service_descriptors_SpatialImgDetections_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_SpatialImgDetections_2eproto_getter() {
  return &descriptor_table_SpatialImgDetections_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SpatialImgDetections_2eproto(&descriptor_table_SpatialImgDetections_2eproto);
namespace proto {

// ===================================================================

class SpatialImgDetections::_Internal {
 public:
  static const ::proto::Timestamp& ts(const SpatialImgDetections* msg);
  static const ::proto::Timestamp& tsdevice(const SpatialImgDetections* msg);
};

const ::proto::Timestamp&
SpatialImgDetections::_Internal::ts(const SpatialImgDetections* msg) {
  return *msg->ts_;
}
const ::proto::Timestamp&
SpatialImgDetections::_Internal::tsdevice(const SpatialImgDetections* msg) {
  return *msg->tsdevice_;
}
void SpatialImgDetections::clear_ts() {
  if (GetArenaForAllocation() == nullptr && ts_ != nullptr) {
    delete ts_;
  }
  ts_ = nullptr;
}
void SpatialImgDetections::clear_tsdevice() {
  if (GetArenaForAllocation() == nullptr && tsdevice_ != nullptr) {
    delete tsdevice_;
  }
  tsdevice_ = nullptr;
}
SpatialImgDetections::SpatialImgDetections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.SpatialImgDetections)
}
SpatialImgDetections::SpatialImgDetections(const SpatialImgDetections& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ts()) {
    ts_ = new ::proto::Timestamp(*from.ts_);
  } else {
    ts_ = nullptr;
  }
  if (from._internal_has_tsdevice()) {
    tsdevice_ = new ::proto::Timestamp(*from.tsdevice_);
  } else {
    tsdevice_ = nullptr;
  }
  sequencenum_ = from.sequencenum_;
  // @@protoc_insertion_point(copy_constructor:proto.SpatialImgDetections)
}

inline void SpatialImgDetections::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequencenum_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(sequencenum_));
}

SpatialImgDetections::~SpatialImgDetections() {
  // @@protoc_insertion_point(destructor:proto.SpatialImgDetections)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpatialImgDetections::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ts_;
  if (this != internal_default_instance()) delete tsdevice_;
}

void SpatialImgDetections::ArenaDtor(void* object) {
  SpatialImgDetections* _this = reinterpret_cast< SpatialImgDetections* >(object);
  (void)_this;
}
void SpatialImgDetections::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpatialImgDetections::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpatialImgDetections::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpatialImgDetections)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  if (GetArenaForAllocation() == nullptr && ts_ != nullptr) {
    delete ts_;
  }
  ts_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tsdevice_ != nullptr) {
    delete tsdevice_;
  }
  tsdevice_ = nullptr;
  sequencenum_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialImgDetections::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sequenceNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Timestamp tsDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsdevice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.SpatialImgDetection detections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialImgDetections::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpatialImgDetections)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sequenceNum = 1;
  if (this->_internal_sequencenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sequencenum(), target);
  }

  // .proto.Timestamp ts = 2;
  if (this->_internal_has_ts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ts(this), target, stream);
  }

  // .proto.Timestamp tsDevice = 3;
  if (this->_internal_has_tsdevice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tsdevice(this), target, stream);
  }

  // repeated .proto.SpatialImgDetection detections = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_detections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_detections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpatialImgDetections)
  return target;
}

size_t SpatialImgDetections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpatialImgDetections)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.SpatialImgDetection detections = 4;
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.Timestamp ts = 2;
  if (this->_internal_has_ts()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ts_);
  }

  // .proto.Timestamp tsDevice = 3;
  if (this->_internal_has_tsdevice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tsdevice_);
  }

  // int64 sequenceNum = 1;
  if (this->_internal_sequencenum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sequencenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialImgDetections::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpatialImgDetections::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialImgDetections::GetClassData() const { return &_class_data_; }

void SpatialImgDetections::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpatialImgDetections *>(to)->MergeFrom(
      static_cast<const SpatialImgDetections &>(from));
}


void SpatialImgDetections::MergeFrom(const SpatialImgDetections& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpatialImgDetections)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  if (from._internal_has_ts()) {
    _internal_mutable_ts()->::proto::Timestamp::MergeFrom(from._internal_ts());
  }
  if (from._internal_has_tsdevice()) {
    _internal_mutable_tsdevice()->::proto::Timestamp::MergeFrom(from._internal_tsdevice());
  }
  if (from._internal_sequencenum() != 0) {
    _internal_set_sequencenum(from._internal_sequencenum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialImgDetections::CopyFrom(const SpatialImgDetections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpatialImgDetections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialImgDetections::IsInitialized() const {
  return true;
}

void SpatialImgDetections::InternalSwap(SpatialImgDetections* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialImgDetections, sequencenum_)
      + sizeof(SpatialImgDetections::sequencenum_)
      - PROTOBUF_FIELD_OFFSET(SpatialImgDetections, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialImgDetections::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[0]);
}

// ===================================================================

class SpatialImgDetection::_Internal {
 public:
  static const ::proto::ImgDetection& detection(const SpatialImgDetection* msg);
  static const ::proto::Point3f& spatialcoordinates(const SpatialImgDetection* msg);
  static const ::proto::SpatialLocationCalculatorConfigData& boundingboxmapping(const SpatialImgDetection* msg);
};

const ::proto::ImgDetection&
SpatialImgDetection::_Internal::detection(const SpatialImgDetection* msg) {
  return *msg->detection_;
}
const ::proto::Point3f&
SpatialImgDetection::_Internal::spatialcoordinates(const SpatialImgDetection* msg) {
  return *msg->spatialcoordinates_;
}
const ::proto::SpatialLocationCalculatorConfigData&
SpatialImgDetection::_Internal::boundingboxmapping(const SpatialImgDetection* msg) {
  return *msg->boundingboxmapping_;
}
void SpatialImgDetection::clear_detection() {
  if (GetArenaForAllocation() == nullptr && detection_ != nullptr) {
    delete detection_;
  }
  detection_ = nullptr;
}
SpatialImgDetection::SpatialImgDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.SpatialImgDetection)
}
SpatialImgDetection::SpatialImgDetection(const SpatialImgDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_detection()) {
    detection_ = new ::proto::ImgDetection(*from.detection_);
  } else {
    detection_ = nullptr;
  }
  if (from._internal_has_spatialcoordinates()) {
    spatialcoordinates_ = new ::proto::Point3f(*from.spatialcoordinates_);
  } else {
    spatialcoordinates_ = nullptr;
  }
  if (from._internal_has_boundingboxmapping()) {
    boundingboxmapping_ = new ::proto::SpatialLocationCalculatorConfigData(*from.boundingboxmapping_);
  } else {
    boundingboxmapping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.SpatialImgDetection)
}

inline void SpatialImgDetection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&detection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boundingboxmapping_) -
    reinterpret_cast<char*>(&detection_)) + sizeof(boundingboxmapping_));
}

SpatialImgDetection::~SpatialImgDetection() {
  // @@protoc_insertion_point(destructor:proto.SpatialImgDetection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpatialImgDetection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete detection_;
  if (this != internal_default_instance()) delete spatialcoordinates_;
  if (this != internal_default_instance()) delete boundingboxmapping_;
}

void SpatialImgDetection::ArenaDtor(void* object) {
  SpatialImgDetection* _this = reinterpret_cast< SpatialImgDetection* >(object);
  (void)_this;
}
void SpatialImgDetection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpatialImgDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpatialImgDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpatialImgDetection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && detection_ != nullptr) {
    delete detection_;
  }
  detection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spatialcoordinates_ != nullptr) {
    delete spatialcoordinates_;
  }
  spatialcoordinates_ = nullptr;
  if (GetArenaForAllocation() == nullptr && boundingboxmapping_ != nullptr) {
    delete boundingboxmapping_;
  }
  boundingboxmapping_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialImgDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ImgDetection detection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Point3f spatialCoordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatialcoordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SpatialLocationCalculatorConfigData boundingBoxMapping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingboxmapping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialImgDetection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpatialImgDetection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ImgDetection detection = 1;
  if (this->_internal_has_detection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::detection(this), target, stream);
  }

  // .proto.Point3f spatialCoordinates = 2;
  if (this->_internal_has_spatialcoordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spatialcoordinates(this), target, stream);
  }

  // .proto.SpatialLocationCalculatorConfigData boundingBoxMapping = 3;
  if (this->_internal_has_boundingboxmapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::boundingboxmapping(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpatialImgDetection)
  return target;
}

size_t SpatialImgDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpatialImgDetection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ImgDetection detection = 1;
  if (this->_internal_has_detection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_);
  }

  // .proto.Point3f spatialCoordinates = 2;
  if (this->_internal_has_spatialcoordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatialcoordinates_);
  }

  // .proto.SpatialLocationCalculatorConfigData boundingBoxMapping = 3;
  if (this->_internal_has_boundingboxmapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingboxmapping_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialImgDetection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpatialImgDetection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialImgDetection::GetClassData() const { return &_class_data_; }

void SpatialImgDetection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpatialImgDetection *>(to)->MergeFrom(
      static_cast<const SpatialImgDetection &>(from));
}


void SpatialImgDetection::MergeFrom(const SpatialImgDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpatialImgDetection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_detection()) {
    _internal_mutable_detection()->::proto::ImgDetection::MergeFrom(from._internal_detection());
  }
  if (from._internal_has_spatialcoordinates()) {
    _internal_mutable_spatialcoordinates()->::proto::Point3f::MergeFrom(from._internal_spatialcoordinates());
  }
  if (from._internal_has_boundingboxmapping()) {
    _internal_mutable_boundingboxmapping()->::proto::SpatialLocationCalculatorConfigData::MergeFrom(from._internal_boundingboxmapping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialImgDetection::CopyFrom(const SpatialImgDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpatialImgDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialImgDetection::IsInitialized() const {
  return true;
}

void SpatialImgDetection::InternalSwap(SpatialImgDetection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialImgDetection, boundingboxmapping_)
      + sizeof(SpatialImgDetection::boundingboxmapping_)
      - PROTOBUF_FIELD_OFFSET(SpatialImgDetection, detection_)>(
          reinterpret_cast<char*>(&detection_),
          reinterpret_cast<char*>(&other->detection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialImgDetection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[1]);
}

// ===================================================================

class Point3f::_Internal {
 public:
};

Point3f::Point3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Point3f)
}
Point3f::Point3f(const Point3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.Point3f)
}

inline void Point3f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:proto.Point3f)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point3f::ArenaDtor(void* object) {
  Point3f* _this = reinterpret_cast< Point3f* >(object);
  (void)_this;
}
void Point3f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Point3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Point3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Point3f)
  return target;
}

size_t Point3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Point3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point3f::GetClassData() const { return &_class_data_; }

void Point3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point3f *>(to)->MergeFrom(
      static_cast<const Point3f &>(from));
}


void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Point3f)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {
  return true;
}

void Point3f::InternalSwap(Point3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3f, z_)
      + sizeof(Point3f::z_)
      - PROTOBUF_FIELD_OFFSET(Point3f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3f::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[2]);
}

// ===================================================================

class SpatialLocationCalculatorConfigData::_Internal {
 public:
  static const ::proto::Rect& roi(const SpatialLocationCalculatorConfigData* msg);
  static const ::proto::SpatialLocationCalculatorAlgorithm& calculationalgorithm(const SpatialLocationCalculatorConfigData* msg);
};

const ::proto::Rect&
SpatialLocationCalculatorConfigData::_Internal::roi(const SpatialLocationCalculatorConfigData* msg) {
  return *msg->roi_;
}
const ::proto::SpatialLocationCalculatorAlgorithm&
SpatialLocationCalculatorConfigData::_Internal::calculationalgorithm(const SpatialLocationCalculatorConfigData* msg) {
  return *msg->calculationalgorithm_;
}
SpatialLocationCalculatorConfigData::SpatialLocationCalculatorConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.SpatialLocationCalculatorConfigData)
}
SpatialLocationCalculatorConfigData::SpatialLocationCalculatorConfigData(const SpatialLocationCalculatorConfigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roi()) {
    roi_ = new ::proto::Rect(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  if (from._internal_has_calculationalgorithm()) {
    calculationalgorithm_ = new ::proto::SpatialLocationCalculatorAlgorithm(*from.calculationalgorithm_);
  } else {
    calculationalgorithm_ = nullptr;
  }
  ::memcpy(&auto__, &from.auto__,
    static_cast<size_t>(reinterpret_cast<char*>(&stepsize_) -
    reinterpret_cast<char*>(&auto__)) + sizeof(stepsize_));
  // @@protoc_insertion_point(copy_constructor:proto.SpatialLocationCalculatorConfigData)
}

inline void SpatialLocationCalculatorConfigData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stepsize_) -
    reinterpret_cast<char*>(&roi_)) + sizeof(stepsize_));
}

SpatialLocationCalculatorConfigData::~SpatialLocationCalculatorConfigData() {
  // @@protoc_insertion_point(destructor:proto.SpatialLocationCalculatorConfigData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpatialLocationCalculatorConfigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roi_;
  if (this != internal_default_instance()) delete calculationalgorithm_;
}

void SpatialLocationCalculatorConfigData::ArenaDtor(void* object) {
  SpatialLocationCalculatorConfigData* _this = reinterpret_cast< SpatialLocationCalculatorConfigData* >(object);
  (void)_this;
}
void SpatialLocationCalculatorConfigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpatialLocationCalculatorConfigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpatialLocationCalculatorConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpatialLocationCalculatorConfigData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && calculationalgorithm_ != nullptr) {
    delete calculationalgorithm_;
  }
  calculationalgorithm_ = nullptr;
  ::memset(&auto__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stepsize_) -
      reinterpret_cast<char*>(&auto__)) + sizeof(stepsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialLocationCalculatorConfigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 AUTO = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          auto__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Rect roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SpatialLocationCalculatorAlgorithm calculationAlgorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_calculationalgorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stepSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          stepsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialLocationCalculatorConfigData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpatialLocationCalculatorConfigData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AUTO = 1;
  if (this->_internal_auto_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_auto_(), target);
  }

  // .proto.Rect roi = 2;
  if (this->_internal_has_roi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi(this), target, stream);
  }

  // .proto.SpatialLocationCalculatorAlgorithm calculationAlgorithm = 3;
  if (this->_internal_has_calculationalgorithm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::calculationalgorithm(this), target, stream);
  }

  // int32 stepSize = 4;
  if (this->_internal_stepsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stepsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpatialLocationCalculatorConfigData)
  return target;
}

size_t SpatialLocationCalculatorConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpatialLocationCalculatorConfigData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Rect roi = 2;
  if (this->_internal_has_roi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_);
  }

  // .proto.SpatialLocationCalculatorAlgorithm calculationAlgorithm = 3;
  if (this->_internal_has_calculationalgorithm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calculationalgorithm_);
  }

  // int32 AUTO = 1;
  if (this->_internal_auto_() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_auto_());
  }

  // int32 stepSize = 4;
  if (this->_internal_stepsize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stepsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialLocationCalculatorConfigData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpatialLocationCalculatorConfigData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialLocationCalculatorConfigData::GetClassData() const { return &_class_data_; }

void SpatialLocationCalculatorConfigData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpatialLocationCalculatorConfigData *>(to)->MergeFrom(
      static_cast<const SpatialLocationCalculatorConfigData &>(from));
}


void SpatialLocationCalculatorConfigData::MergeFrom(const SpatialLocationCalculatorConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpatialLocationCalculatorConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_roi()) {
    _internal_mutable_roi()->::proto::Rect::MergeFrom(from._internal_roi());
  }
  if (from._internal_has_calculationalgorithm()) {
    _internal_mutable_calculationalgorithm()->::proto::SpatialLocationCalculatorAlgorithm::MergeFrom(from._internal_calculationalgorithm());
  }
  if (from._internal_auto_() != 0) {
    _internal_set_auto_(from._internal_auto_());
  }
  if (from._internal_stepsize() != 0) {
    _internal_set_stepsize(from._internal_stepsize());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialLocationCalculatorConfigData::CopyFrom(const SpatialLocationCalculatorConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpatialLocationCalculatorConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialLocationCalculatorConfigData::IsInitialized() const {
  return true;
}

void SpatialLocationCalculatorConfigData::InternalSwap(SpatialLocationCalculatorConfigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialLocationCalculatorConfigData, stepsize_)
      + sizeof(SpatialLocationCalculatorConfigData::stepsize_)
      - PROTOBUF_FIELD_OFFSET(SpatialLocationCalculatorConfigData, roi_)>(
          reinterpret_cast<char*>(&roi_),
          reinterpret_cast<char*>(&other->roi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialLocationCalculatorConfigData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[3]);
}

// ===================================================================

class Rect::_Internal {
 public:
};

Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.Rect)
}

inline void Rect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:proto.Rect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Rect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Rect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Rect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rect::GetClassData() const { return &_class_data_; }

void Rect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rect *>(to)->MergeFrom(
      static_cast<const Rect &>(from));
}


void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, height_)
      + sizeof(Rect::height_)
      - PROTOBUF_FIELD_OFFSET(Rect, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[4]);
}

// ===================================================================

class SpatialLocationCalculatorAlgorithm::_Internal {
 public:
};

SpatialLocationCalculatorAlgorithm::SpatialLocationCalculatorAlgorithm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.SpatialLocationCalculatorAlgorithm)
}
SpatialLocationCalculatorAlgorithm::SpatialLocationCalculatorAlgorithm(const SpatialLocationCalculatorAlgorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lowerthreshold_, &from.lowerthreshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&upperthreshold_) -
    reinterpret_cast<char*>(&lowerthreshold_)) + sizeof(upperthreshold_));
  // @@protoc_insertion_point(copy_constructor:proto.SpatialLocationCalculatorAlgorithm)
}

inline void SpatialLocationCalculatorAlgorithm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lowerthreshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upperthreshold_) -
    reinterpret_cast<char*>(&lowerthreshold_)) + sizeof(upperthreshold_));
}

SpatialLocationCalculatorAlgorithm::~SpatialLocationCalculatorAlgorithm() {
  // @@protoc_insertion_point(destructor:proto.SpatialLocationCalculatorAlgorithm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpatialLocationCalculatorAlgorithm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpatialLocationCalculatorAlgorithm::ArenaDtor(void* object) {
  SpatialLocationCalculatorAlgorithm* _this = reinterpret_cast< SpatialLocationCalculatorAlgorithm* >(object);
  (void)_this;
}
void SpatialLocationCalculatorAlgorithm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpatialLocationCalculatorAlgorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpatialLocationCalculatorAlgorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SpatialLocationCalculatorAlgorithm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lowerthreshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upperthreshold_) -
      reinterpret_cast<char*>(&lowerthreshold_)) + sizeof(upperthreshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpatialLocationCalculatorAlgorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lowerThreshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lowerthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 upperThreshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          upperthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpatialLocationCalculatorAlgorithm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SpatialLocationCalculatorAlgorithm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lowerThreshold = 1;
  if (this->_internal_lowerthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lowerthreshold(), target);
  }

  // uint32 upperThreshold = 2;
  if (this->_internal_upperthreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_upperthreshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SpatialLocationCalculatorAlgorithm)
  return target;
}

size_t SpatialLocationCalculatorAlgorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SpatialLocationCalculatorAlgorithm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lowerThreshold = 1;
  if (this->_internal_lowerthreshold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lowerthreshold());
  }

  // uint32 upperThreshold = 2;
  if (this->_internal_upperthreshold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_upperthreshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpatialLocationCalculatorAlgorithm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpatialLocationCalculatorAlgorithm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpatialLocationCalculatorAlgorithm::GetClassData() const { return &_class_data_; }

void SpatialLocationCalculatorAlgorithm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpatialLocationCalculatorAlgorithm *>(to)->MergeFrom(
      static_cast<const SpatialLocationCalculatorAlgorithm &>(from));
}


void SpatialLocationCalculatorAlgorithm::MergeFrom(const SpatialLocationCalculatorAlgorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SpatialLocationCalculatorAlgorithm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lowerthreshold() != 0) {
    _internal_set_lowerthreshold(from._internal_lowerthreshold());
  }
  if (from._internal_upperthreshold() != 0) {
    _internal_set_upperthreshold(from._internal_upperthreshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpatialLocationCalculatorAlgorithm::CopyFrom(const SpatialLocationCalculatorAlgorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SpatialLocationCalculatorAlgorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialLocationCalculatorAlgorithm::IsInitialized() const {
  return true;
}

void SpatialLocationCalculatorAlgorithm::InternalSwap(SpatialLocationCalculatorAlgorithm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpatialLocationCalculatorAlgorithm, upperthreshold_)
      + sizeof(SpatialLocationCalculatorAlgorithm::upperthreshold_)
      - PROTOBUF_FIELD_OFFSET(SpatialLocationCalculatorAlgorithm, lowerthreshold_)>(
          reinterpret_cast<char*>(&lowerthreshold_),
          reinterpret_cast<char*>(&other->lowerthreshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpatialLocationCalculatorAlgorithm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_SpatialImgDetections_2eproto_getter, &descriptor_table_SpatialImgDetections_2eproto_once,
      file_level_metadata_SpatialImgDetections_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::SpatialImgDetections* Arena::CreateMaybeMessage< ::proto::SpatialImgDetections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SpatialImgDetections >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SpatialImgDetection* Arena::CreateMaybeMessage< ::proto::SpatialImgDetection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SpatialImgDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Point3f* Arena::CreateMaybeMessage< ::proto::Point3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Point3f >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SpatialLocationCalculatorConfigData* Arena::CreateMaybeMessage< ::proto::SpatialLocationCalculatorConfigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SpatialLocationCalculatorConfigData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Rect* Arena::CreateMaybeMessage< ::proto::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SpatialLocationCalculatorAlgorithm* Arena::CreateMaybeMessage< ::proto::SpatialLocationCalculatorAlgorithm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SpatialLocationCalculatorAlgorithm >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
