// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImgDetections.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ImgDetections_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ImgDetections_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ImgDetections_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ImgDetections_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ImgDetections_2eproto;
namespace proto {
class ImgDetection;
struct ImgDetectionDefaultTypeInternal;
extern ImgDetectionDefaultTypeInternal _ImgDetection_default_instance_;
class ImgDetections;
struct ImgDetectionsDefaultTypeInternal;
extern ImgDetectionsDefaultTypeInternal _ImgDetections_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ImgDetection* Arena::CreateMaybeMessage<::proto::ImgDetection>(Arena*);
template<> ::proto::ImgDetections* Arena::CreateMaybeMessage<::proto::ImgDetections>(Arena*);
template<> ::proto::Timestamp* Arena::CreateMaybeMessage<::proto::Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class ImgDetections final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ImgDetections) */ {
 public:
  inline ImgDetections() : ImgDetections(nullptr) {}
  ~ImgDetections() override;
  explicit constexpr ImgDetections(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgDetections(const ImgDetections& from);
  ImgDetections(ImgDetections&& from) noexcept
    : ImgDetections() {
    *this = ::std::move(from);
  }

  inline ImgDetections& operator=(const ImgDetections& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgDetections& operator=(ImgDetections&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgDetections& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgDetections* internal_default_instance() {
    return reinterpret_cast<const ImgDetections*>(
               &_ImgDetections_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImgDetections& a, ImgDetections& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgDetections* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgDetections* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImgDetections* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImgDetections>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgDetections& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgDetections& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgDetections* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ImgDetections";
  }
  protected:
  explicit ImgDetections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 4,
    kTsFieldNumber = 2,
    kTsDeviceFieldNumber = 3,
    kSequenceNumFieldNumber = 1,
  };
  // repeated .proto.ImgDetection detections = 4;
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::proto::ImgDetection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgDetection >*
      mutable_detections();
  private:
  const ::proto::ImgDetection& _internal_detections(int index) const;
  ::proto::ImgDetection* _internal_add_detections();
  public:
  const ::proto::ImgDetection& detections(int index) const;
  ::proto::ImgDetection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgDetection >&
      detections() const;

  // .proto.Timestamp ts = 2;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  const ::proto::Timestamp& ts() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_ts();
  ::proto::Timestamp* mutable_ts();
  void set_allocated_ts(::proto::Timestamp* ts);
  private:
  const ::proto::Timestamp& _internal_ts() const;
  ::proto::Timestamp* _internal_mutable_ts();
  public:
  void unsafe_arena_set_allocated_ts(
      ::proto::Timestamp* ts);
  ::proto::Timestamp* unsafe_arena_release_ts();

  // .proto.Timestamp tsDevice = 3;
  bool has_tsdevice() const;
  private:
  bool _internal_has_tsdevice() const;
  public:
  void clear_tsdevice();
  const ::proto::Timestamp& tsdevice() const;
  PROTOBUF_NODISCARD ::proto::Timestamp* release_tsdevice();
  ::proto::Timestamp* mutable_tsdevice();
  void set_allocated_tsdevice(::proto::Timestamp* tsdevice);
  private:
  const ::proto::Timestamp& _internal_tsdevice() const;
  ::proto::Timestamp* _internal_mutable_tsdevice();
  public:
  void unsafe_arena_set_allocated_tsdevice(
      ::proto::Timestamp* tsdevice);
  ::proto::Timestamp* unsafe_arena_release_tsdevice();

  // int64 sequenceNum = 1;
  void clear_sequencenum();
  int64_t sequencenum() const;
  void set_sequencenum(int64_t value);
  private:
  int64_t _internal_sequencenum() const;
  void _internal_set_sequencenum(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ImgDetections)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgDetection > detections_;
  ::proto::Timestamp* ts_;
  ::proto::Timestamp* tsdevice_;
  int64_t sequencenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgDetections_2eproto;
};
// -------------------------------------------------------------------

class Timestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  ~Timestamp() override;
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Timestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Timestamp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int64 sec = 1;
  void clear_sec();
  int64_t sec() const;
  void set_sec(int64_t value);
  private:
  int64_t _internal_sec() const;
  void _internal_set_sec(int64_t value);
  public:

  // int64 nsec = 2;
  void clear_nsec();
  int64_t nsec() const;
  void set_nsec(int64_t value);
  private:
  int64_t _internal_nsec() const;
  void _internal_set_nsec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t sec_;
  int64_t nsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgDetections_2eproto;
};
// -------------------------------------------------------------------

class ImgDetection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ImgDetection) */ {
 public:
  inline ImgDetection() : ImgDetection(nullptr) {}
  ~ImgDetection() override;
  explicit constexpr ImgDetection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImgDetection(const ImgDetection& from);
  ImgDetection(ImgDetection&& from) noexcept
    : ImgDetection() {
    *this = ::std::move(from);
  }

  inline ImgDetection& operator=(const ImgDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImgDetection& operator=(ImgDetection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImgDetection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImgDetection* internal_default_instance() {
    return reinterpret_cast<const ImgDetection*>(
               &_ImgDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ImgDetection& a, ImgDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(ImgDetection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImgDetection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImgDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImgDetection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImgDetection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ImgDetection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImgDetection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ImgDetection";
  }
  protected:
  explicit ImgDetection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kXminFieldNumber = 3,
    kYminFieldNumber = 4,
    kXmaxFieldNumber = 5,
    kYmaxFieldNumber = 6,
  };
  // uint32 label = 1;
  void clear_label();
  uint32_t label() const;
  void set_label(uint32_t value);
  private:
  uint32_t _internal_label() const;
  void _internal_set_label(uint32_t value);
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float xmin = 3;
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // float ymin = 4;
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // float xmax = 5;
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // float ymax = 6;
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ImgDetection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t label_;
  float confidence_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ImgDetections_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImgDetections

// int64 sequenceNum = 1;
inline void ImgDetections::clear_sequencenum() {
  sequencenum_ = int64_t{0};
}
inline int64_t ImgDetections::_internal_sequencenum() const {
  return sequencenum_;
}
inline int64_t ImgDetections::sequencenum() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetections.sequenceNum)
  return _internal_sequencenum();
}
inline void ImgDetections::_internal_set_sequencenum(int64_t value) {
  
  sequencenum_ = value;
}
inline void ImgDetections::set_sequencenum(int64_t value) {
  _internal_set_sequencenum(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetections.sequenceNum)
}

// .proto.Timestamp ts = 2;
inline bool ImgDetections::_internal_has_ts() const {
  return this != internal_default_instance() && ts_ != nullptr;
}
inline bool ImgDetections::has_ts() const {
  return _internal_has_ts();
}
inline void ImgDetections::clear_ts() {
  if (GetArenaForAllocation() == nullptr && ts_ != nullptr) {
    delete ts_;
  }
  ts_ = nullptr;
}
inline const ::proto::Timestamp& ImgDetections::_internal_ts() const {
  const ::proto::Timestamp* p = ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ImgDetections::ts() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetections.ts)
  return _internal_ts();
}
inline void ImgDetections::unsafe_arena_set_allocated_ts(
    ::proto::Timestamp* ts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_);
  }
  ts_ = ts;
  if (ts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgDetections.ts)
}
inline ::proto::Timestamp* ImgDetections::release_ts() {
  
  ::proto::Timestamp* temp = ts_;
  ts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ImgDetections::unsafe_arena_release_ts() {
  // @@protoc_insertion_point(field_release:proto.ImgDetections.ts)
  
  ::proto::Timestamp* temp = ts_;
  ts_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ImgDetections::_internal_mutable_ts() {
  
  if (ts_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    ts_ = p;
  }
  return ts_;
}
inline ::proto::Timestamp* ImgDetections::mutable_ts() {
  ::proto::Timestamp* _msg = _internal_mutable_ts();
  // @@protoc_insertion_point(field_mutable:proto.ImgDetections.ts)
  return _msg;
}
inline void ImgDetections::set_allocated_ts(::proto::Timestamp* ts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ts_;
  }
  if (ts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Timestamp>::GetOwningArena(ts);
    if (message_arena != submessage_arena) {
      ts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts, submessage_arena);
    }
    
  } else {
    
  }
  ts_ = ts;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgDetections.ts)
}

// .proto.Timestamp tsDevice = 3;
inline bool ImgDetections::_internal_has_tsdevice() const {
  return this != internal_default_instance() && tsdevice_ != nullptr;
}
inline bool ImgDetections::has_tsdevice() const {
  return _internal_has_tsdevice();
}
inline void ImgDetections::clear_tsdevice() {
  if (GetArenaForAllocation() == nullptr && tsdevice_ != nullptr) {
    delete tsdevice_;
  }
  tsdevice_ = nullptr;
}
inline const ::proto::Timestamp& ImgDetections::_internal_tsdevice() const {
  const ::proto::Timestamp* p = tsdevice_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Timestamp&>(
      ::proto::_Timestamp_default_instance_);
}
inline const ::proto::Timestamp& ImgDetections::tsdevice() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetections.tsDevice)
  return _internal_tsdevice();
}
inline void ImgDetections::unsafe_arena_set_allocated_tsdevice(
    ::proto::Timestamp* tsdevice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tsdevice_);
  }
  tsdevice_ = tsdevice;
  if (tsdevice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ImgDetections.tsDevice)
}
inline ::proto::Timestamp* ImgDetections::release_tsdevice() {
  
  ::proto::Timestamp* temp = tsdevice_;
  tsdevice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Timestamp* ImgDetections::unsafe_arena_release_tsdevice() {
  // @@protoc_insertion_point(field_release:proto.ImgDetections.tsDevice)
  
  ::proto::Timestamp* temp = tsdevice_;
  tsdevice_ = nullptr;
  return temp;
}
inline ::proto::Timestamp* ImgDetections::_internal_mutable_tsdevice() {
  
  if (tsdevice_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Timestamp>(GetArenaForAllocation());
    tsdevice_ = p;
  }
  return tsdevice_;
}
inline ::proto::Timestamp* ImgDetections::mutable_tsdevice() {
  ::proto::Timestamp* _msg = _internal_mutable_tsdevice();
  // @@protoc_insertion_point(field_mutable:proto.ImgDetections.tsDevice)
  return _msg;
}
inline void ImgDetections::set_allocated_tsdevice(::proto::Timestamp* tsdevice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tsdevice_;
  }
  if (tsdevice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::proto::Timestamp>::GetOwningArena(tsdevice);
    if (message_arena != submessage_arena) {
      tsdevice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsdevice, submessage_arena);
    }
    
  } else {
    
  }
  tsdevice_ = tsdevice;
  // @@protoc_insertion_point(field_set_allocated:proto.ImgDetections.tsDevice)
}

// repeated .proto.ImgDetection detections = 4;
inline int ImgDetections::_internal_detections_size() const {
  return detections_.size();
}
inline int ImgDetections::detections_size() const {
  return _internal_detections_size();
}
inline void ImgDetections::clear_detections() {
  detections_.Clear();
}
inline ::proto::ImgDetection* ImgDetections::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ImgDetections.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgDetection >*
ImgDetections::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:proto.ImgDetections.detections)
  return &detections_;
}
inline const ::proto::ImgDetection& ImgDetections::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::proto::ImgDetection& ImgDetections::detections(int index) const {
  // @@protoc_insertion_point(field_get:proto.ImgDetections.detections)
  return _internal_detections(index);
}
inline ::proto::ImgDetection* ImgDetections::_internal_add_detections() {
  return detections_.Add();
}
inline ::proto::ImgDetection* ImgDetections::add_detections() {
  ::proto::ImgDetection* _add = _internal_add_detections();
  // @@protoc_insertion_point(field_add:proto.ImgDetections.detections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ImgDetection >&
ImgDetections::detections() const {
  // @@protoc_insertion_point(field_list:proto.ImgDetections.detections)
  return detections_;
}

// -------------------------------------------------------------------

// Timestamp

// int64 sec = 1;
inline void Timestamp::clear_sec() {
  sec_ = int64_t{0};
}
inline int64_t Timestamp::_internal_sec() const {
  return sec_;
}
inline int64_t Timestamp::sec() const {
  // @@protoc_insertion_point(field_get:proto.Timestamp.sec)
  return _internal_sec();
}
inline void Timestamp::_internal_set_sec(int64_t value) {
  
  sec_ = value;
}
inline void Timestamp::set_sec(int64_t value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:proto.Timestamp.sec)
}

// int64 nsec = 2;
inline void Timestamp::clear_nsec() {
  nsec_ = int64_t{0};
}
inline int64_t Timestamp::_internal_nsec() const {
  return nsec_;
}
inline int64_t Timestamp::nsec() const {
  // @@protoc_insertion_point(field_get:proto.Timestamp.nsec)
  return _internal_nsec();
}
inline void Timestamp::_internal_set_nsec(int64_t value) {
  
  nsec_ = value;
}
inline void Timestamp::set_nsec(int64_t value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:proto.Timestamp.nsec)
}

// -------------------------------------------------------------------

// ImgDetection

// uint32 label = 1;
inline void ImgDetection::clear_label() {
  label_ = 0u;
}
inline uint32_t ImgDetection::_internal_label() const {
  return label_;
}
inline uint32_t ImgDetection::label() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.label)
  return _internal_label();
}
inline void ImgDetection::_internal_set_label(uint32_t value) {
  
  label_ = value;
}
inline void ImgDetection::set_label(uint32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.label)
}

// float confidence = 2;
inline void ImgDetection::clear_confidence() {
  confidence_ = 0;
}
inline float ImgDetection::_internal_confidence() const {
  return confidence_;
}
inline float ImgDetection::confidence() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.confidence)
  return _internal_confidence();
}
inline void ImgDetection::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void ImgDetection::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.confidence)
}

// float xmin = 3;
inline void ImgDetection::clear_xmin() {
  xmin_ = 0;
}
inline float ImgDetection::_internal_xmin() const {
  return xmin_;
}
inline float ImgDetection::xmin() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.xmin)
  return _internal_xmin();
}
inline void ImgDetection::_internal_set_xmin(float value) {
  
  xmin_ = value;
}
inline void ImgDetection::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.xmin)
}

// float ymin = 4;
inline void ImgDetection::clear_ymin() {
  ymin_ = 0;
}
inline float ImgDetection::_internal_ymin() const {
  return ymin_;
}
inline float ImgDetection::ymin() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.ymin)
  return _internal_ymin();
}
inline void ImgDetection::_internal_set_ymin(float value) {
  
  ymin_ = value;
}
inline void ImgDetection::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.ymin)
}

// float xmax = 5;
inline void ImgDetection::clear_xmax() {
  xmax_ = 0;
}
inline float ImgDetection::_internal_xmax() const {
  return xmax_;
}
inline float ImgDetection::xmax() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.xmax)
  return _internal_xmax();
}
inline void ImgDetection::_internal_set_xmax(float value) {
  
  xmax_ = value;
}
inline void ImgDetection::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.xmax)
}

// float ymax = 6;
inline void ImgDetection::clear_ymax() {
  ymax_ = 0;
}
inline float ImgDetection::_internal_ymax() const {
  return ymax_;
}
inline float ImgDetection::ymax() const {
  // @@protoc_insertion_point(field_get:proto.ImgDetection.ymax)
  return _internal_ymax();
}
inline void ImgDetection::_internal_set_ymax(float value) {
  
  ymax_ = value;
}
inline void ImgDetection::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:proto.ImgDetection.ymax)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ImgDetections_2eproto
